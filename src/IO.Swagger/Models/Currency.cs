/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Currency :  IEquatable<Currency>
    {
                /// <summary>
        /// Gets or Sets Type
        /// </summary>
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum RealEnum for "real"
            /// </summary>
            [EnumMember(Value = "real")]
            RealEnum,
            
            /// <summary>
            /// Enum VirtualEnum for "virtual"
            /// </summary>
            [EnumMember(Value = "virtual")]
            VirtualEnum
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        /// <param name="Active">Active.</param>
        /// <param name="Code">Code.</param>
        /// <param name="DateCreated">DateCreated.</param>
        /// <param name="DateUpdated">DateUpdated.</param>
        /// <param name="Factor">Factor.</param>
        /// <param name="Icon">Icon.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Virtual">Virtual.</param>
        public Currency(bool? Active = default(bool?), string Code = default(string), long? DateCreated = default(long?), long? DateUpdated = default(long?), double? Factor = default(double?), string Icon = default(string), int? Id = default(int?), string Name = default(string), TypeEnum? Type = default(TypeEnum?), bool? Virtual = default(bool?))
        {
            this.Active = Active;
            this.Code = Code;
            this.DateCreated = DateCreated;
            this.DateUpdated = DateUpdated;
            this.Factor = Factor;
            this.Icon = Icon;
            this.Id = Id;
            this.Name = Name;
            this.Type = Type;
            this.Virtual = Virtual;
            
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active")]
        public bool? Active { get; set; }
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code")]
        public string Code { get; set; }
        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="date_created")]
        public long? DateCreated { get; set; }
        /// <summary>
        /// Gets or Sets DateUpdated
        /// </summary>
        [DataMember(Name="date_updated")]
        public long? DateUpdated { get; set; }
        /// <summary>
        /// Gets or Sets Factor
        /// </summary>
        [DataMember(Name="factor")]
        public double? Factor { get; set; }
        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon")]
        public string Icon { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Virtual
        /// </summary>
        [DataMember(Name="virtual")]
        public bool? Virtual { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Currency {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  Factor: ").Append(Factor).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Virtual: ").Append(Virtual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Currency)obj);
        }

        /// <summary>
        /// Returns true if Currency instances are equal
        /// </summary>
        /// <param name="other">Instance of Currency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Currency other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.DateCreated == other.DateCreated ||
                    this.DateCreated != null &&
                    this.DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    this.DateUpdated == other.DateUpdated ||
                    this.DateUpdated != null &&
                    this.DateUpdated.Equals(other.DateUpdated)
                ) && 
                (
                    this.Factor == other.Factor ||
                    this.Factor != null &&
                    this.Factor.Equals(other.Factor)
                ) && 
                (
                    this.Icon == other.Icon ||
                    this.Icon != null &&
                    this.Icon.Equals(other.Icon)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Virtual == other.Virtual ||
                    this.Virtual != null &&
                    this.Virtual.Equals(other.Virtual)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                    if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                    if (this.DateCreated != null)
                    hash = hash * 59 + this.DateCreated.GetHashCode();
                    if (this.DateUpdated != null)
                    hash = hash * 59 + this.DateUpdated.GetHashCode();
                    if (this.Factor != null)
                    hash = hash * 59 + this.Factor.GetHashCode();
                    if (this.Icon != null)
                    hash = hash * 59 + this.Icon.GetHashCode();
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                    if (this.Virtual != null)
                    hash = hash * 59 + this.Virtual.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Currency left, Currency right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Currency left, Currency right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
