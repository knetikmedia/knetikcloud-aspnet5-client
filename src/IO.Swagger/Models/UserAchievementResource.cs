/*
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserAchievementResource :  IEquatable<UserAchievementResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAchievementResource" /> class.
        /// </summary>
        /// <param name="Achieved">Flag indicating whether the user has earned the achievement.</param>
        /// <param name="AchievementName">The achievement being tracked.  If used for Leveling, this represents the tier name (required).</param>
        /// <param name="CreatedDate">The date/time this resource was created in seconds since unix epoch.</param>
        /// <param name="EarnedDate">The date/time the achievement was earned as a unix timestamp in seconds.</param>
        /// <param name="UpdatedDate">The date/time this resource was last updated in seconds since unix epoch.</param>
        public UserAchievementResource(bool? Achieved = null, string AchievementName = null, long? CreatedDate = null, long? EarnedDate = null, long? UpdatedDate = null)
        {
            // to ensure "AchievementName" is required (not null)
            if (AchievementName == null)
            {
                throw new InvalidDataException("AchievementName is a required property for UserAchievementResource and cannot be null");
            }
            else
            {
                this.AchievementName = AchievementName;
            }
            this.Achieved = Achieved;
            this.CreatedDate = CreatedDate;
            this.EarnedDate = EarnedDate;
            this.UpdatedDate = UpdatedDate;
            
        }

        /// <summary>
        /// Flag indicating whether the user has earned the achievement
        /// </summary>
        /// <value>Flag indicating whether the user has earned the achievement</value>
        [DataMember(Name="achieved")]
        public bool? Achieved { get; set; }

        /// <summary>
        /// The achievement being tracked.  If used for Leveling, this represents the tier name
        /// </summary>
        /// <value>The achievement being tracked.  If used for Leveling, this represents the tier name</value>
        [DataMember(Name="achievement_name")]
        public string AchievementName { get; set; }

        /// <summary>
        /// The date/time this resource was created in seconds since unix epoch
        /// </summary>
        /// <value>The date/time this resource was created in seconds since unix epoch</value>
        [DataMember(Name="created_date")]
        public long? CreatedDate { get; set; }

        /// <summary>
        /// The date/time the achievement was earned as a unix timestamp in seconds
        /// </summary>
        /// <value>The date/time the achievement was earned as a unix timestamp in seconds</value>
        [DataMember(Name="earned_date")]
        public long? EarnedDate { get; set; }

        /// <summary>
        /// The date/time this resource was last updated in seconds since unix epoch
        /// </summary>
        /// <value>The date/time this resource was last updated in seconds since unix epoch</value>
        [DataMember(Name="updated_date")]
        public long? UpdatedDate { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAchievementResource {\n");
            sb.Append("  Achieved: ").Append(Achieved).Append("\n");
            sb.Append("  AchievementName: ").Append(AchievementName).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  EarnedDate: ").Append(EarnedDate).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((UserAchievementResource)obj);
        }

        /// <summary>
        /// Returns true if UserAchievementResource instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAchievementResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAchievementResource other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Achieved == other.Achieved ||
                    this.Achieved != null &&
                    this.Achieved.Equals(other.Achieved)
                ) && 
                (
                    this.AchievementName == other.AchievementName ||
                    this.AchievementName != null &&
                    this.AchievementName.Equals(other.AchievementName)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.EarnedDate == other.EarnedDate ||
                    this.EarnedDate != null &&
                    this.EarnedDate.Equals(other.EarnedDate)
                ) && 
                (
                    this.UpdatedDate == other.UpdatedDate ||
                    this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(other.UpdatedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Achieved != null)
                    hash = hash * 59 + this.Achieved.GetHashCode();
                    if (this.AchievementName != null)
                    hash = hash * 59 + this.AchievementName.GetHashCode();
                    if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                    if (this.EarnedDate != null)
                    hash = hash * 59 + this.EarnedDate.GetHashCode();
                    if (this.UpdatedDate != null)
                    hash = hash * 59 + this.UpdatedDate.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(UserAchievementResource left, UserAchievementResource right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserAchievementResource left, UserAchievementResource right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
