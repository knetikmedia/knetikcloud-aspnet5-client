/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LimitedGettableGroup :  IEquatable<LimitedGettableGroup>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="LimitedGettableGroup" /> class.
        /// </summary>
        /// <param name="ActiveOnly">Whether to get active items only (required).</param>
        /// <param name="Name">The name of the group. Multiple items with the same group name will be limited together, leave null to be assigned a random unique name. It is typical that owned_limit and active_only will be the same for all, but this is not enforced and the item being recieved will use its settings..</param>
        /// <param name="OwnedLimit">The max number of items that can be purchased (required).</param>
        public LimitedGettableGroup(bool? ActiveOnly = default(bool?), string Name = default(string), int? OwnedLimit = default(int?))
        {
            // to ensure "ActiveOnly" is required (not null)
            if (ActiveOnly == null)
            {
                throw new InvalidDataException("ActiveOnly is a required property for LimitedGettableGroup and cannot be null");
            }
            else
            {
                this.ActiveOnly = ActiveOnly;
            }
            // to ensure "OwnedLimit" is required (not null)
            if (OwnedLimit == null)
            {
                throw new InvalidDataException("OwnedLimit is a required property for LimitedGettableGroup and cannot be null");
            }
            else
            {
                this.OwnedLimit = OwnedLimit;
            }
            this.Name = Name;
            
        }

        /// <summary>
        /// Whether to get active items only
        /// </summary>
        /// <value>Whether to get active items only</value>
        [DataMember(Name="active_only")]
        public bool? ActiveOnly { get; set; }
        /// <summary>
        /// The name of the group. Multiple items with the same group name will be limited together, leave null to be assigned a random unique name. It is typical that owned_limit and active_only will be the same for all, but this is not enforced and the item being recieved will use its settings.
        /// </summary>
        /// <value>The name of the group. Multiple items with the same group name will be limited together, leave null to be assigned a random unique name. It is typical that owned_limit and active_only will be the same for all, but this is not enforced and the item being recieved will use its settings.</value>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// The max number of items that can be purchased
        /// </summary>
        /// <value>The max number of items that can be purchased</value>
        [DataMember(Name="owned_limit")]
        public int? OwnedLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LimitedGettableGroup {\n");
            sb.Append("  ActiveOnly: ").Append(ActiveOnly).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnedLimit: ").Append(OwnedLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((LimitedGettableGroup)obj);
        }

        /// <summary>
        /// Returns true if LimitedGettableGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of LimitedGettableGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LimitedGettableGroup other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ActiveOnly == other.ActiveOnly ||
                    this.ActiveOnly != null &&
                    this.ActiveOnly.Equals(other.ActiveOnly)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.OwnedLimit == other.OwnedLimit ||
                    this.OwnedLimit != null &&
                    this.OwnedLimit.Equals(other.OwnedLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ActiveOnly != null)
                    hash = hash * 59 + this.ActiveOnly.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.OwnedLimit != null)
                    hash = hash * 59 + this.OwnedLimit.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(LimitedGettableGroup left, LimitedGettableGroup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LimitedGettableGroup left, LimitedGettableGroup right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
