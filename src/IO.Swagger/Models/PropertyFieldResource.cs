/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PropertyFieldResource :  IEquatable<PropertyFieldResource>
    {
                /// <summary>
        /// The type of values within a 'list' type field
        /// </summary>
        /// <value>The type of values within a 'list' type field</value>
        public enum InnerTypeEnum
        {
            
            /// <summary>
            /// Enum IntegerEnum for "integer"
            /// </summary>
            [EnumMember(Value = "integer")]
            IntegerEnum,
            
            /// <summary>
            /// Enum NumberEnum for "number"
            /// </summary>
            [EnumMember(Value = "number")]
            NumberEnum,
            
            /// <summary>
            /// Enum BoolEnum for "bool"
            /// </summary>
            [EnumMember(Value = "bool")]
            BoolEnum,
            
            /// <summary>
            /// Enum StringEnum for "string"
            /// </summary>
            [EnumMember(Value = "string")]
            StringEnum,
            
            /// <summary>
            /// Enum EnumerationEnum for "enumeration"
            /// </summary>
            [EnumMember(Value = "enumeration")]
            EnumerationEnum,
            
            /// <summary>
            /// Enum ListEnum for "list"
            /// </summary>
            [EnumMember(Value = "list")]
            ListEnum,
            
            /// <summary>
            /// Enum ObjectEnum for "object"
            /// </summary>
            [EnumMember(Value = "object")]
            ObjectEnum
        }
                /// <summary>
        /// The type of the field
        /// </summary>
        /// <value>The type of the field</value>
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum IntegerEnum for "integer"
            /// </summary>
            [EnumMember(Value = "integer")]
            IntegerEnum,
            
            /// <summary>
            /// Enum NumberEnum for "number"
            /// </summary>
            [EnumMember(Value = "number")]
            NumberEnum,
            
            /// <summary>
            /// Enum BoolEnum for "bool"
            /// </summary>
            [EnumMember(Value = "bool")]
            BoolEnum,
            
            /// <summary>
            /// Enum StringEnum for "string"
            /// </summary>
            [EnumMember(Value = "string")]
            StringEnum,
            
            /// <summary>
            /// Enum EnumerationEnum for "enumeration"
            /// </summary>
            [EnumMember(Value = "enumeration")]
            EnumerationEnum,
            
            /// <summary>
            /// Enum ListEnum for "list"
            /// </summary>
            [EnumMember(Value = "list")]
            ListEnum,
            
            /// <summary>
            /// Enum ObjectEnum for "object"
            /// </summary>
            [EnumMember(Value = "object")]
            ObjectEnum
        }
        /// <summary>
        /// The type of values within a &#39;list&#39; type field
        /// </summary>
        /// <value>The type of values within a &#39;list&#39; type field</value>
        [DataMember(Name="inner_type")]
        public InnerTypeEnum? InnerType { get; set; }
        /// <summary>
        /// The type of the field
        /// </summary>
        /// <value>The type of the field</value>
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyFieldResource" /> class.
        /// </summary>
        /// <param name="Description">A description of the field.</param>
        /// <param name="InnerType">The type of values within a &#39;list&#39; type field.</param>
        /// <param name="InnerTypeFields">A description of fields within objects within a &#39;list&#39; type field, when inner_type is &#39;object&#39;.</param>
        /// <param name="Name">The name of the field.</param>
        /// <param name="Required">Whether the field is required.</param>
        /// <param name="Type">The type of the field.</param>
        /// <param name="ValidValues">A list of valid values for &#39;enum&#39; type fields.</param>
        public PropertyFieldResource(string Description = default(string), InnerTypeEnum? InnerType = default(InnerTypeEnum?), List<PropertyFieldResource> InnerTypeFields = default(List<PropertyFieldResource>), string Name = default(string), bool? Required = default(bool?), TypeEnum? Type = default(TypeEnum?), List<string> ValidValues = default(List<string>))
        {
            this.Description = Description;
            this.InnerType = InnerType;
            this.InnerTypeFields = InnerTypeFields;
            this.Name = Name;
            this.Required = Required;
            this.Type = Type;
            this.ValidValues = ValidValues;
            
        }

        /// <summary>
        /// A description of the field
        /// </summary>
        /// <value>A description of the field</value>
        [DataMember(Name="description")]
        public string Description { get; set; }
        /// <summary>
        /// A description of fields within objects within a &#39;list&#39; type field, when inner_type is &#39;object&#39;
        /// </summary>
        /// <value>A description of fields within objects within a &#39;list&#39; type field, when inner_type is &#39;object&#39;</value>
        [DataMember(Name="inner_type_fields")]
        public List<PropertyFieldResource> InnerTypeFields { get; set; }
        /// <summary>
        /// The name of the field
        /// </summary>
        /// <value>The name of the field</value>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// Whether the field is required
        /// </summary>
        /// <value>Whether the field is required</value>
        [DataMember(Name="required")]
        public bool? Required { get; set; }
        /// <summary>
        /// A list of valid values for &#39;enum&#39; type fields
        /// </summary>
        /// <value>A list of valid values for &#39;enum&#39; type fields</value>
        [DataMember(Name="valid_values")]
        public List<string> ValidValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertyFieldResource {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InnerType: ").Append(InnerType).Append("\n");
            sb.Append("  InnerTypeFields: ").Append(InnerTypeFields).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ValidValues: ").Append(ValidValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((PropertyFieldResource)obj);
        }

        /// <summary>
        /// Returns true if PropertyFieldResource instances are equal
        /// </summary>
        /// <param name="other">Instance of PropertyFieldResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyFieldResource other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.InnerType == other.InnerType ||
                    this.InnerType != null &&
                    this.InnerType.Equals(other.InnerType)
                ) && 
                (
                    this.InnerTypeFields == other.InnerTypeFields ||
                    this.InnerTypeFields != null &&
                    this.InnerTypeFields.SequenceEqual(other.InnerTypeFields)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.ValidValues == other.ValidValues ||
                    this.ValidValues != null &&
                    this.ValidValues.SequenceEqual(other.ValidValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.InnerType != null)
                    hash = hash * 59 + this.InnerType.GetHashCode();
                    if (this.InnerTypeFields != null)
                    hash = hash * 59 + this.InnerTypeFields.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                    if (this.ValidValues != null)
                    hash = hash * 59 + this.ValidValues.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(PropertyFieldResource left, PropertyFieldResource right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PropertyFieldResource left, PropertyFieldResource right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
