/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BatchRequest :  IEquatable<BatchRequest>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchRequest" /> class.
        /// </summary>
        /// <param name="Body">The request body as would be passed to the URI (required).</param>
        /// <param name="ContentType">Content type used, Ex:(application/json) (required).</param>
        /// <param name="Method">The HTTP method used, Ex: (GET) (required).</param>
        /// <param name="Timeout">Time in seconds before process will timeout.  Default is 60.  Range is 1-300 (required).</param>
        /// <param name="Token">The oauth token only.</param>
        /// <param name="Uri">Full URI of REST call (required).</param>
        public BatchRequest(Object Body = default(Object), string ContentType = default(string), string Method = default(string), int? Timeout = default(int?), string Token = default(string), string Uri = default(string))
        {
            // to ensure "Body" is required (not null)
            if (Body == null)
            {
                throw new InvalidDataException("Body is a required property for BatchRequest and cannot be null");
            }
            else
            {
                this.Body = Body;
            }
            // to ensure "ContentType" is required (not null)
            if (ContentType == null)
            {
                throw new InvalidDataException("ContentType is a required property for BatchRequest and cannot be null");
            }
            else
            {
                this.ContentType = ContentType;
            }
            // to ensure "Method" is required (not null)
            if (Method == null)
            {
                throw new InvalidDataException("Method is a required property for BatchRequest and cannot be null");
            }
            else
            {
                this.Method = Method;
            }
            // to ensure "Timeout" is required (not null)
            if (Timeout == null)
            {
                throw new InvalidDataException("Timeout is a required property for BatchRequest and cannot be null");
            }
            else
            {
                this.Timeout = Timeout;
            }
            // to ensure "Uri" is required (not null)
            if (Uri == null)
            {
                throw new InvalidDataException("Uri is a required property for BatchRequest and cannot be null");
            }
            else
            {
                this.Uri = Uri;
            }
            this.Token = Token;
            
        }

        /// <summary>
        /// The request body as would be passed to the URI
        /// </summary>
        /// <value>The request body as would be passed to the URI</value>
        [DataMember(Name="body")]
        public Object Body { get; set; }
        /// <summary>
        /// Content type used, Ex:(application/json)
        /// </summary>
        /// <value>Content type used, Ex:(application/json)</value>
        [DataMember(Name="content_type")]
        public string ContentType { get; set; }
        /// <summary>
        /// The HTTP method used, Ex: (GET)
        /// </summary>
        /// <value>The HTTP method used, Ex: (GET)</value>
        [DataMember(Name="method")]
        public string Method { get; set; }
        /// <summary>
        /// Time in seconds before process will timeout.  Default is 60.  Range is 1-300
        /// </summary>
        /// <value>Time in seconds before process will timeout.  Default is 60.  Range is 1-300</value>
        [DataMember(Name="timeout")]
        public int? Timeout { get; set; }
        /// <summary>
        /// The oauth token only
        /// </summary>
        /// <value>The oauth token only</value>
        [DataMember(Name="token")]
        public string Token { get; set; }
        /// <summary>
        /// Full URI of REST call
        /// </summary>
        /// <value>Full URI of REST call</value>
        [DataMember(Name="uri")]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchRequest {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((BatchRequest)obj);
        }

        /// <summary>
        /// Returns true if BatchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of BatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchRequest other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Body == other.Body ||
                    this.Body != null &&
                    this.Body.Equals(other.Body)
                ) && 
                (
                    this.ContentType == other.ContentType ||
                    this.ContentType != null &&
                    this.ContentType.Equals(other.ContentType)
                ) && 
                (
                    this.Method == other.Method ||
                    this.Method != null &&
                    this.Method.Equals(other.Method)
                ) && 
                (
                    this.Timeout == other.Timeout ||
                    this.Timeout != null &&
                    this.Timeout.Equals(other.Timeout)
                ) && 
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) && 
                (
                    this.Uri == other.Uri ||
                    this.Uri != null &&
                    this.Uri.Equals(other.Uri)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Body != null)
                    hash = hash * 59 + this.Body.GetHashCode();
                    if (this.ContentType != null)
                    hash = hash * 59 + this.ContentType.GetHashCode();
                    if (this.Method != null)
                    hash = hash * 59 + this.Method.GetHashCode();
                    if (this.Timeout != null)
                    hash = hash * 59 + this.Timeout.GetHashCode();
                    if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                    if (this.Uri != null)
                    hash = hash * 59 + this.Uri.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(BatchRequest left, BatchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BatchRequest left, BatchRequest right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
