/*
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AchievementDefinitionResource :  IEquatable<AchievementDefinitionResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AchievementDefinitionResource" /> class.
        /// </summary>
        /// <param name="AdditionalProperties">A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this resource type.</param>
        /// <param name="CreatedDate">The date/time this resource was created in seconds since unix epoch.</param>
        /// <param name="Description">The description of the achievement. Must be at least 2 characters in length..</param>
        /// <param name="Hidden">Whether the achievement is hidden from the user (required).</param>
        /// <param name="Name">The name of the achievement. Must be at least 6 characters in length. IMMUTABLE (required).</param>
        /// <param name="RequiredProgress">The required progress for the achievement definition (required).</param>
        /// <param name="RuleId">The id of the rule generated for this achievement.</param>
        /// <param name="Tags">The tags for the achievement definition.</param>
        /// <param name="Template">An achievement template this achievement is validated against (private). May be null and no validation of additional_properties will be done.</param>
        /// <param name="TriggerEventName">The name of the trigger event associated with this achievement.</param>
        /// <param name="UpdatedDate">The date/time this resource was last updated in seconds since unix epoch.</param>
        public AchievementDefinitionResource(Dictionary<string, Property> AdditionalProperties = null, long? CreatedDate = null, string Description = null, bool? Hidden = null, string Name = null, int? RequiredProgress = null, string RuleId = null, List<string> Tags = null, string Template = null, string TriggerEventName = null, long? UpdatedDate = null)
        {
            // to ensure "Hidden" is required (not null)
            if (Hidden == null)
            {
                throw new InvalidDataException("Hidden is a required property for AchievementDefinitionResource and cannot be null");
            }
            else
            {
                this.Hidden = Hidden;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for AchievementDefinitionResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "RequiredProgress" is required (not null)
            if (RequiredProgress == null)
            {
                throw new InvalidDataException("RequiredProgress is a required property for AchievementDefinitionResource and cannot be null");
            }
            else
            {
                this.RequiredProgress = RequiredProgress;
            }
            this.AdditionalProperties = AdditionalProperties;
            this.CreatedDate = CreatedDate;
            this.Description = Description;
            this.RuleId = RuleId;
            this.Tags = Tags;
            this.Template = Template;
            this.TriggerEventName = TriggerEventName;
            this.UpdatedDate = UpdatedDate;
            
        }

        /// <summary>
        /// A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this resource type
        /// </summary>
        /// <value>A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this resource type</value>
        [DataMember(Name="additional_properties")]
        public Dictionary<string, Property> AdditionalProperties { get; set; }

        /// <summary>
        /// The date/time this resource was created in seconds since unix epoch
        /// </summary>
        /// <value>The date/time this resource was created in seconds since unix epoch</value>
        [DataMember(Name="created_date")]
        public long? CreatedDate { get; set; }

        /// <summary>
        /// The description of the achievement. Must be at least 2 characters in length.
        /// </summary>
        /// <value>The description of the achievement. Must be at least 2 characters in length.</value>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Whether the achievement is hidden from the user
        /// </summary>
        /// <value>Whether the achievement is hidden from the user</value>
        [DataMember(Name="hidden")]
        public bool? Hidden { get; set; }

        /// <summary>
        /// The name of the achievement. Must be at least 6 characters in length. IMMUTABLE
        /// </summary>
        /// <value>The name of the achievement. Must be at least 6 characters in length. IMMUTABLE</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The required progress for the achievement definition
        /// </summary>
        /// <value>The required progress for the achievement definition</value>
        [DataMember(Name="required_progress")]
        public int? RequiredProgress { get; set; }

        /// <summary>
        /// The id of the rule generated for this achievement
        /// </summary>
        /// <value>The id of the rule generated for this achievement</value>
        [DataMember(Name="rule_id")]
        public string RuleId { get; set; }

        /// <summary>
        /// The tags for the achievement definition
        /// </summary>
        /// <value>The tags for the achievement definition</value>
        [DataMember(Name="tags")]
        public List<string> Tags { get; set; }

        /// <summary>
        /// An achievement template this achievement is validated against (private). May be null and no validation of additional_properties will be done
        /// </summary>
        /// <value>An achievement template this achievement is validated against (private). May be null and no validation of additional_properties will be done</value>
        [DataMember(Name="template")]
        public string Template { get; set; }

        /// <summary>
        /// The name of the trigger event associated with this achievement
        /// </summary>
        /// <value>The name of the trigger event associated with this achievement</value>
        [DataMember(Name="trigger_event_name")]
        public string TriggerEventName { get; set; }

        /// <summary>
        /// The date/time this resource was last updated in seconds since unix epoch
        /// </summary>
        /// <value>The date/time this resource was last updated in seconds since unix epoch</value>
        [DataMember(Name="updated_date")]
        public long? UpdatedDate { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AchievementDefinitionResource {\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RequiredProgress: ").Append(RequiredProgress).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  TriggerEventName: ").Append(TriggerEventName).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((AchievementDefinitionResource)obj);
        }

        /// <summary>
        /// Returns true if AchievementDefinitionResource instances are equal
        /// </summary>
        /// <param name="other">Instance of AchievementDefinitionResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AchievementDefinitionResource other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.AdditionalProperties == other.AdditionalProperties ||
                    this.AdditionalProperties != null &&
                    this.AdditionalProperties.SequenceEqual(other.AdditionalProperties)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Hidden == other.Hidden ||
                    this.Hidden != null &&
                    this.Hidden.Equals(other.Hidden)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RequiredProgress == other.RequiredProgress ||
                    this.RequiredProgress != null &&
                    this.RequiredProgress.Equals(other.RequiredProgress)
                ) && 
                (
                    this.RuleId == other.RuleId ||
                    this.RuleId != null &&
                    this.RuleId.Equals(other.RuleId)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.Template == other.Template ||
                    this.Template != null &&
                    this.Template.Equals(other.Template)
                ) && 
                (
                    this.TriggerEventName == other.TriggerEventName ||
                    this.TriggerEventName != null &&
                    this.TriggerEventName.Equals(other.TriggerEventName)
                ) && 
                (
                    this.UpdatedDate == other.UpdatedDate ||
                    this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(other.UpdatedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.AdditionalProperties != null)
                    hash = hash * 59 + this.AdditionalProperties.GetHashCode();
                    if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.Hidden != null)
                    hash = hash * 59 + this.Hidden.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.RequiredProgress != null)
                    hash = hash * 59 + this.RequiredProgress.GetHashCode();
                    if (this.RuleId != null)
                    hash = hash * 59 + this.RuleId.GetHashCode();
                    if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                    if (this.Template != null)
                    hash = hash * 59 + this.Template.GetHashCode();
                    if (this.TriggerEventName != null)
                    hash = hash * 59 + this.TriggerEventName.GetHashCode();
                    if (this.UpdatedDate != null)
                    hash = hash * 59 + this.UpdatedDate.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(AchievementDefinitionResource left, AchievementDefinitionResource right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AchievementDefinitionResource left, AchievementDefinitionResource right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
