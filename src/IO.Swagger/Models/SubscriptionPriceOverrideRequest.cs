/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubscriptionPriceOverrideRequest :  IEquatable<SubscriptionPriceOverrideRequest>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPriceOverrideRequest" /> class.
        /// </summary>
        /// <param name="NewPrice">The recurring price that has been set to override the base price. Null if not overriding.</param>
        /// <param name="Reason">An explanation for the reason the price is being overridden.</param>
        public SubscriptionPriceOverrideRequest(double? NewPrice = default(double?), string Reason = default(string))
        {
            this.NewPrice = NewPrice;
            this.Reason = Reason;
            
        }

        /// <summary>
        /// The recurring price that has been set to override the base price. Null if not overriding
        /// </summary>
        /// <value>The recurring price that has been set to override the base price. Null if not overriding</value>
        [DataMember(Name="new_price")]
        public double? NewPrice { get; set; }
        /// <summary>
        /// An explanation for the reason the price is being overridden
        /// </summary>
        /// <value>An explanation for the reason the price is being overridden</value>
        [DataMember(Name="reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPriceOverrideRequest {\n");
            sb.Append("  NewPrice: ").Append(NewPrice).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((SubscriptionPriceOverrideRequest)obj);
        }

        /// <summary>
        /// Returns true if SubscriptionPriceOverrideRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionPriceOverrideRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPriceOverrideRequest other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.NewPrice == other.NewPrice ||
                    this.NewPrice != null &&
                    this.NewPrice.Equals(other.NewPrice)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.NewPrice != null)
                    hash = hash * 59 + this.NewPrice.GetHashCode();
                    if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(SubscriptionPriceOverrideRequest left, SubscriptionPriceOverrideRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubscriptionPriceOverrideRequest left, SubscriptionPriceOverrideRequest right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
