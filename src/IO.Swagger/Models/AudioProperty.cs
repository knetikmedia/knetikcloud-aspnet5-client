/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AudioProperty : FileProperty,  IEquatable<AudioProperty>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioProperty" /> class.
        /// </summary>
        /// <param name="Type">The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties. (required).</param>
        /// <param name="Crc">A crc value for file integrity verification.</param>
        /// <param name="Description">A description of the file.</param>
        /// <param name="FileType">The type of file such as txt, mp3, mov or csv.</param>
        /// <param name="Url">The url of the file.</param>
        public AudioProperty(string Type = default(string), string Crc = default(string), string Description = default(string), string FileType = default(string), string Url = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for AudioProperty and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Crc = Crc;
            this.Description = Description;
            this.FileType = FileType;
            this.Url = Url;
            
        }

        /// <summary>
        /// The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties.
        /// </summary>
        /// <value>The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties.</value>
        [DataMember(Name="type")]
        public string Type { get; set; }
        /// <summary>
        /// A crc value for file integrity verification
        /// </summary>
        /// <value>A crc value for file integrity verification</value>
        [DataMember(Name="crc")]
        public string Crc { get; set; }
        /// <summary>
        /// A description of the file
        /// </summary>
        /// <value>A description of the file</value>
        [DataMember(Name="description")]
        public string Description { get; set; }
        /// <summary>
        /// The type of file such as txt, mp3, mov or csv
        /// </summary>
        /// <value>The type of file such as txt, mp3, mov or csv</value>
        [DataMember(Name="file_type")]
        public string FileType { get; set; }
        /// <summary>
        /// The url of the file
        /// </summary>
        /// <value>The url of the file</value>
        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudioProperty {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Crc: ").Append(Crc).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((AudioProperty)obj);
        }

        /// <summary>
        /// Returns true if AudioProperty instances are equal
        /// </summary>
        /// <param name="other">Instance of AudioProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudioProperty other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Crc == other.Crc ||
                    this.Crc != null &&
                    this.Crc.Equals(other.Crc)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.FileType == other.FileType ||
                    this.FileType != null &&
                    this.FileType.Equals(other.FileType)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                    if (this.Crc != null)
                    hash = hash * 59 + this.Crc.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.FileType != null)
                    hash = hash * 59 + this.FileType.GetHashCode();
                    if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(AudioProperty left, AudioProperty right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AudioProperty left, AudioProperty right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
