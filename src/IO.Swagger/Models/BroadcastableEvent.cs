/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BroadcastableEvent :  IEquatable<BroadcastableEvent>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="BroadcastableEvent" /> class.
        /// </summary>
        /// <param name="Client">Client.</param>
        /// <param name="Customer">Customer.</param>
        /// <param name="DoNotBroadcast">DoNotBroadcast.</param>
        /// <param name="Section">Section.</param>
        /// <param name="Source">Source.</param>
        /// <param name="Specifics">Specifics.</param>
        /// <param name="Synchronous">Synchronous.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="Type">The type of the event. Used for polymorphic type recognition and thus must match an expected type (required).</param>
        public BroadcastableEvent(string Client = default(string), string Customer = default(string), bool? DoNotBroadcast = default(bool?), string Section = default(string), Object Source = default(Object), string Specifics = default(string), bool? Synchronous = default(bool?), long? Timestamp = default(long?), string Type = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for BroadcastableEvent and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Client = Client;
            this.Customer = Customer;
            this.DoNotBroadcast = DoNotBroadcast;
            this.Section = Section;
            this.Source = Source;
            this.Specifics = Specifics;
            this.Synchronous = Synchronous;
            this.Timestamp = Timestamp;
            
        }

        /// <summary>
        /// Gets or Sets Client
        /// </summary>
        [DataMember(Name="client")]
        public string Client { get; set; }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer")]
        public string Customer { get; set; }
        /// <summary>
        /// Gets or Sets DoNotBroadcast
        /// </summary>
        [DataMember(Name="do_not_broadcast")]
        public bool? DoNotBroadcast { get; set; }
        /// <summary>
        /// Gets or Sets Section
        /// </summary>
        [DataMember(Name="section")]
        public string Section { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source")]
        public Object Source { get; set; }
        /// <summary>
        /// Gets or Sets Specifics
        /// </summary>
        [DataMember(Name="specifics")]
        public string Specifics { get; set; }
        /// <summary>
        /// Gets or Sets Synchronous
        /// </summary>
        [DataMember(Name="synchronous")]
        public bool? Synchronous { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp")]
        public long? Timestamp { get; set; }
        /// <summary>
        /// The type of the event. Used for polymorphic type recognition and thus must match an expected type
        /// </summary>
        /// <value>The type of the event. Used for polymorphic type recognition and thus must match an expected type</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BroadcastableEvent {\n");
            sb.Append("  Client: ").Append(Client).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  DoNotBroadcast: ").Append(DoNotBroadcast).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Specifics: ").Append(Specifics).Append("\n");
            sb.Append("  Synchronous: ").Append(Synchronous).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((BroadcastableEvent)obj);
        }

        /// <summary>
        /// Returns true if BroadcastableEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of BroadcastableEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BroadcastableEvent other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Client == other.Client ||
                    this.Client != null &&
                    this.Client.Equals(other.Client)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.DoNotBroadcast == other.DoNotBroadcast ||
                    this.DoNotBroadcast != null &&
                    this.DoNotBroadcast.Equals(other.DoNotBroadcast)
                ) && 
                (
                    this.Section == other.Section ||
                    this.Section != null &&
                    this.Section.Equals(other.Section)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.Specifics == other.Specifics ||
                    this.Specifics != null &&
                    this.Specifics.Equals(other.Specifics)
                ) && 
                (
                    this.Synchronous == other.Synchronous ||
                    this.Synchronous != null &&
                    this.Synchronous.Equals(other.Synchronous)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Client != null)
                    hash = hash * 59 + this.Client.GetHashCode();
                    if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                    if (this.DoNotBroadcast != null)
                    hash = hash * 59 + this.DoNotBroadcast.GetHashCode();
                    if (this.Section != null)
                    hash = hash * 59 + this.Section.GetHashCode();
                    if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                    if (this.Specifics != null)
                    hash = hash * 59 + this.Specifics.GetHashCode();
                    if (this.Synchronous != null)
                    hash = hash * 59 + this.Synchronous.GetHashCode();
                    if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(BroadcastableEvent left, BroadcastableEvent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BroadcastableEvent left, BroadcastableEvent right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
