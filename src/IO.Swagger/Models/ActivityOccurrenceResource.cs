/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ActivityOccurrenceResource :  IEquatable<ActivityOccurrenceResource>
    {
                /// <summary>
        /// Indicate if the rewards have been given out already
        /// </summary>
        /// <value>Indicate if the rewards have been given out already</value>
        public enum RewardStatusEnum
        {
            
            /// <summary>
            /// Enum PendingEnum for "pending"
            /// </summary>
            [EnumMember(Value = "pending")]
            PendingEnum,
            
            /// <summary>
            /// Enum FailedEnum for "failed"
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum,
            
            /// <summary>
            /// Enum CompleteEnum for "complete"
            /// </summary>
            [EnumMember(Value = "complete")]
            CompleteEnum,
            
            /// <summary>
            /// Enum PartialEnum for "partial"
            /// </summary>
            [EnumMember(Value = "partial")]
            PartialEnum
        }
                /// <summary>
        /// The current status of the occurrence (default: OPEN)
        /// </summary>
        /// <value>The current status of the occurrence (default: OPEN)</value>
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum SETUPEnum for "SETUP"
            /// </summary>
            [EnumMember(Value = "SETUP")]
            SETUPEnum,
            
            /// <summary>
            /// Enum OPENEnum for "OPEN"
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPENEnum,
            
            /// <summary>
            /// Enum PLAYINGEnum for "PLAYING"
            /// </summary>
            [EnumMember(Value = "PLAYING")]
            PLAYINGEnum,
            
            /// <summary>
            /// Enum FINISHEDEnum for "FINISHED"
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHEDEnum,
            
            /// <summary>
            /// Enum ABANDONEDEnum for "ABANDONED"
            /// </summary>
            [EnumMember(Value = "ABANDONED")]
            ABANDONEDEnum
        }
        /// <summary>
        /// Indicate if the rewards have been given out already
        /// </summary>
        /// <value>Indicate if the rewards have been given out already</value>
        [DataMember(Name="reward_status")]
        public RewardStatusEnum? RewardStatus { get; set; }
        /// <summary>
        /// The current status of the occurrence (default: OPEN)
        /// </summary>
        /// <value>The current status of the occurrence (default: OPEN)</value>
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityOccurrenceResource" /> class.
        /// </summary>
        /// <param name="ActivityId">The id of the activity (required).</param>
        /// <param name="ChallengeActivityId">The id of the challenge activity (as part of the event, required if eventId set).</param>
        /// <param name="CreatedDate">The date this occurrence was created, unix timestamp in seconds.</param>
        /// <param name="Entitlement">The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity.</param>
        /// <param name="EventId">The id of the event.</param>
        /// <param name="Id">The id of the activity occurrence.</param>
        /// <param name="RewardStatus">Indicate if the rewards have been given out already.</param>
        /// <param name="Settings">The list of settings and their options available for this activity. Should be null on create if and only if part of an event.</param>
        /// <param name="Simulated">Whether this occurrence will be played as a simulation..</param>
        /// <param name="StartDate">The date this occurrence was started, unix timestamp in seconds. null if not yet started.</param>
        /// <param name="Status">The current status of the occurrence (default: OPEN).</param>
        /// <param name="UpdatedDate">The date this occurrence was last updated, unix timestamp in seconds.</param>
        /// <param name="Users">The list of users playing in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission.</param>
        public ActivityOccurrenceResource(long? ActivityId = default(long?), long? ChallengeActivityId = default(long?), ActivityEntitlementResource Entitlement = default(ActivityEntitlementResource), long? EventId = default(long?), List<SelectedSettingResource> Settings = default(List<SelectedSettingResource>), bool? Simulated = default(bool?), StatusEnum? Status = default(StatusEnum?), List<ActivityUserResource> Users = default(List<ActivityUserResource>))
        {
            // to ensure "ActivityId" is required (not null)
            if (ActivityId == null)
            {
                throw new InvalidDataException("ActivityId is a required property for ActivityOccurrenceResource and cannot be null");
            }
            else
            {
                this.ActivityId = ActivityId;
            }
            this.ChallengeActivityId = ChallengeActivityId;
            this.CreatedDate = CreatedDate;
            this.Entitlement = Entitlement;
            this.EventId = EventId;
            this.Id = Id;
            this.RewardStatus = RewardStatus;
            this.Settings = Settings;
            this.Simulated = Simulated;
            this.StartDate = StartDate;
            this.Status = Status;
            this.UpdatedDate = UpdatedDate;
            this.Users = Users;
            
        }

        /// <summary>
        /// The id of the activity
        /// </summary>
        /// <value>The id of the activity</value>
        [DataMember(Name="activity_id")]
        public long? ActivityId { get; set; }
        /// <summary>
        /// The id of the challenge activity (as part of the event, required if eventId set)
        /// </summary>
        /// <value>The id of the challenge activity (as part of the event, required if eventId set)</value>
        [DataMember(Name="challenge_activity_id")]
        public long? ChallengeActivityId { get; set; }
        /// <summary>
        /// The date this occurrence was created, unix timestamp in seconds
        /// </summary>
        /// <value>The date this occurrence was created, unix timestamp in seconds</value>
        [DataMember(Name="created_date")]
        public long? CreatedDate { get; private set; }
        /// <summary>
        /// The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity
        /// </summary>
        /// <value>The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity</value>
        [DataMember(Name="entitlement")]
        public ActivityEntitlementResource Entitlement { get; set; }
        /// <summary>
        /// The id of the event
        /// </summary>
        /// <value>The id of the event</value>
        [DataMember(Name="event_id")]
        public long? EventId { get; set; }
        /// <summary>
        /// The id of the activity occurrence
        /// </summary>
        /// <value>The id of the activity occurrence</value>
        [DataMember(Name="id")]
        public long? Id { get; private set; }
        /// <summary>
        /// The list of settings and their options available for this activity. Should be null on create if and only if part of an event
        /// </summary>
        /// <value>The list of settings and their options available for this activity. Should be null on create if and only if part of an event</value>
        [DataMember(Name="settings")]
        public List<SelectedSettingResource> Settings { get; set; }
        /// <summary>
        /// Whether this occurrence will be played as a simulation.
        /// </summary>
        /// <value>Whether this occurrence will be played as a simulation.</value>
        [DataMember(Name="simulated")]
        public bool? Simulated { get; set; }
        /// <summary>
        /// The date this occurrence was started, unix timestamp in seconds. null if not yet started
        /// </summary>
        /// <value>The date this occurrence was started, unix timestamp in seconds. null if not yet started</value>
        [DataMember(Name="start_date")]
        public long? StartDate { get; private set; }
        /// <summary>
        /// The date this occurrence was last updated, unix timestamp in seconds
        /// </summary>
        /// <value>The date this occurrence was last updated, unix timestamp in seconds</value>
        [DataMember(Name="updated_date")]
        public long? UpdatedDate { get; private set; }
        /// <summary>
        /// The list of users playing in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission
        /// </summary>
        /// <value>The list of users playing in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission</value>
        [DataMember(Name="users")]
        public List<ActivityUserResource> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityOccurrenceResource {\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  ChallengeActivityId: ").Append(ChallengeActivityId).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Entitlement: ").Append(Entitlement).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RewardStatus: ").Append(RewardStatus).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Simulated: ").Append(Simulated).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((ActivityOccurrenceResource)obj);
        }

        /// <summary>
        /// Returns true if ActivityOccurrenceResource instances are equal
        /// </summary>
        /// <param name="other">Instance of ActivityOccurrenceResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityOccurrenceResource other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ActivityId == other.ActivityId ||
                    this.ActivityId != null &&
                    this.ActivityId.Equals(other.ActivityId)
                ) && 
                (
                    this.ChallengeActivityId == other.ChallengeActivityId ||
                    this.ChallengeActivityId != null &&
                    this.ChallengeActivityId.Equals(other.ChallengeActivityId)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.Entitlement == other.Entitlement ||
                    this.Entitlement != null &&
                    this.Entitlement.Equals(other.Entitlement)
                ) && 
                (
                    this.EventId == other.EventId ||
                    this.EventId != null &&
                    this.EventId.Equals(other.EventId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.RewardStatus == other.RewardStatus ||
                    this.RewardStatus != null &&
                    this.RewardStatus.Equals(other.RewardStatus)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.SequenceEqual(other.Settings)
                ) && 
                (
                    this.Simulated == other.Simulated ||
                    this.Simulated != null &&
                    this.Simulated.Equals(other.Simulated)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.UpdatedDate == other.UpdatedDate ||
                    this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ActivityId != null)
                    hash = hash * 59 + this.ActivityId.GetHashCode();
                    if (this.ChallengeActivityId != null)
                    hash = hash * 59 + this.ChallengeActivityId.GetHashCode();
                    if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                    if (this.Entitlement != null)
                    hash = hash * 59 + this.Entitlement.GetHashCode();
                    if (this.EventId != null)
                    hash = hash * 59 + this.EventId.GetHashCode();
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.RewardStatus != null)
                    hash = hash * 59 + this.RewardStatus.GetHashCode();
                    if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                    if (this.Simulated != null)
                    hash = hash * 59 + this.Simulated.GetHashCode();
                    if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                    if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                    if (this.UpdatedDate != null)
                    hash = hash * 59 + this.UpdatedDate.GetHashCode();
                    if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(ActivityOccurrenceResource left, ActivityOccurrenceResource right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActivityOccurrenceResource left, ActivityOccurrenceResource right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
