/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VariableTypeResource :  IEquatable<VariableTypeResource>
    {
                /// <summary>
        /// The base class of the type
        /// </summary>
        /// <value>The base class of the type</value>
        public enum BaseEnum
        {
            
            /// <summary>
            /// Enum NUMBEREnum for "NUMBER"
            /// </summary>
            [EnumMember(Value = "NUMBER")]
            NUMBEREnum,
            
            /// <summary>
            /// Enum INTEGEREnum for "INTEGER"
            /// </summary>
            [EnumMember(Value = "INTEGER")]
            INTEGEREnum,
            
            /// <summary>
            /// Enum STRINGEnum for "STRING"
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRINGEnum,
            
            /// <summary>
            /// Enum DATEEnum for "DATE"
            /// </summary>
            [EnumMember(Value = "DATE")]
            DATEEnum,
            
            /// <summary>
            /// Enum BOOLEANEnum for "BOOLEAN"
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEANEnum
        }
        /// <summary>
        /// The base class of the type
        /// </summary>
        /// <value>The base class of the type</value>
        [DataMember(Name="base")]
        public BaseEnum? Base { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariableTypeResource" /> class.
        /// </summary>
        /// <param name="Base">The base class of the type (required).</param>
        /// <param name="Name">The name of the variable type. Used as the unique id (required).</param>
        public VariableTypeResource(BaseEnum? Base = default(BaseEnum?), string Name = default(string))
        {
            // to ensure "Base" is required (not null)
            if (Base == null)
            {
                throw new InvalidDataException("Base is a required property for VariableTypeResource and cannot be null");
            }
            else
            {
                this.Base = Base;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for VariableTypeResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            
        }

        /// <summary>
        /// The name of the variable type. Used as the unique id
        /// </summary>
        /// <value>The name of the variable type. Used as the unique id</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariableTypeResource {\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((VariableTypeResource)obj);
        }

        /// <summary>
        /// Returns true if VariableTypeResource instances are equal
        /// </summary>
        /// <param name="other">Instance of VariableTypeResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariableTypeResource other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Base == other.Base ||
                    this.Base != null &&
                    this.Base.Equals(other.Base)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Base != null)
                    hash = hash * 59 + this.Base.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(VariableTypeResource left, VariableTypeResource right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VariableTypeResource left, VariableTypeResource right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
