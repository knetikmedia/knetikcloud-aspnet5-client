/*
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ForwardLog :  IEquatable<ForwardLog>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForwardLog" /> class.
        /// </summary>
        /// <param name="EndDate">The end date of the forward log entry.</param>
        /// <param name="ErrorMsg">ErrorMsg.</param>
        /// <param name="HttpStatusCode">The http status code the forward log entry.</param>
        /// <param name="Id">The id of the forward log entry.</param>
        /// <param name="Payload">The payload of the forward log entry.</param>
        /// <param name="Response">The response string of the forward log entry.</param>
        /// <param name="RetryCount">The retry count of the forward log entry.</param>
        /// <param name="StartDate">The start date of the forward log entry.</param>
        /// <param name="Url">The endpoint url of the forward log entry.</param>
        public ForwardLog(long? EndDate = null, string ErrorMsg = null, int? HttpStatusCode = null, string Id = null, Object Payload = null, string Response = null, int? RetryCount = null, long? StartDate = null, string Url = null)
        {
            this.EndDate = EndDate;
            this.ErrorMsg = ErrorMsg;
            this.HttpStatusCode = HttpStatusCode;
            this.Id = Id;
            this.Payload = Payload;
            this.Response = Response;
            this.RetryCount = RetryCount;
            this.StartDate = StartDate;
            this.Url = Url;
            
        }

        /// <summary>
        /// The end date of the forward log entry
        /// </summary>
        /// <value>The end date of the forward log entry</value>
        [DataMember(Name="end_date")]
        public long? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMsg
        /// </summary>
        [DataMember(Name="error_msg")]
        public string ErrorMsg { get; set; }

        /// <summary>
        /// The http status code the forward log entry
        /// </summary>
        /// <value>The http status code the forward log entry</value>
        [DataMember(Name="http_status_code")]
        public int? HttpStatusCode { get; set; }

        /// <summary>
        /// The id of the forward log entry
        /// </summary>
        /// <value>The id of the forward log entry</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The payload of the forward log entry
        /// </summary>
        /// <value>The payload of the forward log entry</value>
        [DataMember(Name="payload")]
        public Object Payload { get; set; }

        /// <summary>
        /// The response string of the forward log entry
        /// </summary>
        /// <value>The response string of the forward log entry</value>
        [DataMember(Name="response")]
        public string Response { get; set; }

        /// <summary>
        /// The retry count of the forward log entry
        /// </summary>
        /// <value>The retry count of the forward log entry</value>
        [DataMember(Name="retry_count")]
        public int? RetryCount { get; set; }

        /// <summary>
        /// The start date of the forward log entry
        /// </summary>
        /// <value>The start date of the forward log entry</value>
        [DataMember(Name="start_date")]
        public long? StartDate { get; set; }

        /// <summary>
        /// The endpoint url of the forward log entry
        /// </summary>
        /// <value>The endpoint url of the forward log entry</value>
        [DataMember(Name="url")]
        public string Url { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForwardLog {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ErrorMsg: ").Append(ErrorMsg).Append("\n");
            sb.Append("  HttpStatusCode: ").Append(HttpStatusCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((ForwardLog)obj);
        }

        /// <summary>
        /// Returns true if ForwardLog instances are equal
        /// </summary>
        /// <param name="other">Instance of ForwardLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForwardLog other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.ErrorMsg == other.ErrorMsg ||
                    this.ErrorMsg != null &&
                    this.ErrorMsg.Equals(other.ErrorMsg)
                ) && 
                (
                    this.HttpStatusCode == other.HttpStatusCode ||
                    this.HttpStatusCode != null &&
                    this.HttpStatusCode.Equals(other.HttpStatusCode)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Payload == other.Payload ||
                    this.Payload != null &&
                    this.Payload.Equals(other.Payload)
                ) && 
                (
                    this.Response == other.Response ||
                    this.Response != null &&
                    this.Response.Equals(other.Response)
                ) && 
                (
                    this.RetryCount == other.RetryCount ||
                    this.RetryCount != null &&
                    this.RetryCount.Equals(other.RetryCount)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                    if (this.ErrorMsg != null)
                    hash = hash * 59 + this.ErrorMsg.GetHashCode();
                    if (this.HttpStatusCode != null)
                    hash = hash * 59 + this.HttpStatusCode.GetHashCode();
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Payload != null)
                    hash = hash * 59 + this.Payload.GetHashCode();
                    if (this.Response != null)
                    hash = hash * 59 + this.Response.GetHashCode();
                    if (this.RetryCount != null)
                    hash = hash * 59 + this.RetryCount.GetHashCode();
                    if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                    if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(ForwardLog left, ForwardLog right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ForwardLog left, ForwardLog right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
