/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GoogleToken :  IEquatable<GoogleToken>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GoogleToken" /> class.
        /// </summary>
        /// <param name="AuthorizationCode">A valid authorization code from google. See google documention for how to obtain one. (required).</param>
        public GoogleToken(string AuthorizationCode = default(string))
        {
            // to ensure "AuthorizationCode" is required (not null)
            if (AuthorizationCode == null)
            {
                throw new InvalidDataException("AuthorizationCode is a required property for GoogleToken and cannot be null");
            }
            else
            {
                this.AuthorizationCode = AuthorizationCode;
            }
            
        }

        /// <summary>
        /// A valid authorization code from google. See google documention for how to obtain one.
        /// </summary>
        /// <value>A valid authorization code from google. See google documention for how to obtain one.</value>
        [DataMember(Name="authorization_code")]
        public string AuthorizationCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoogleToken {\n");
            sb.Append("  AuthorizationCode: ").Append(AuthorizationCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((GoogleToken)obj);
        }

        /// <summary>
        /// Returns true if GoogleToken instances are equal
        /// </summary>
        /// <param name="other">Instance of GoogleToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoogleToken other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.AuthorizationCode == other.AuthorizationCode ||
                    this.AuthorizationCode != null &&
                    this.AuthorizationCode.Equals(other.AuthorizationCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.AuthorizationCode != null)
                    hash = hash * 59 + this.AuthorizationCode.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(GoogleToken left, GoogleToken right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GoogleToken left, GoogleToken right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
