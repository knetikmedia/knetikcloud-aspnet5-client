/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class StoreShoppingCartsApiController : Controller
    { 

        /// <summary>
        /// Adds a custom discount to the cart
        /// </summary>
        
        /// <param name="id">The id of the cart</param>
        /// <param name="customDiscount">The details of the discount to add</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//carts/{id}/custom-discounts")]
        [SwaggerOperation("AddCustomDiscount")]
        public virtual void AddCustomDiscount([FromRoute]string id, [FromBody]CouponDefinition customDiscount)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Adds a discount coupon to the cart
        /// </summary>
        
        /// <param name="id">The id of the cart</param>
        /// <param name="skuRequest">The request of the sku</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//carts/{id}/discounts")]
        [SwaggerOperation("AddDiscountToCart")]
        public virtual void AddDiscountToCart([FromRoute]string id, [FromBody]SkuRequest skuRequest)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Add an item to the cart
        /// </summary>
        /// <remarks>Currently, carts cannot contain virtual and real currency items at the same time. Furthermore, the API only support a single virtual item at the moment</remarks>
        /// <param name="id">The id of the cart</param>
        /// <param name="cartItemRequest">The cart item request object</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//carts/{id}/items")]
        [SwaggerOperation("AddItemToCart")]
        public virtual void AddItemToCart([FromRoute]string id, [FromBody]CartItemRequest cartItemRequest)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Create a cart
        /// </summary>
        /// <remarks>You don&#39;t have to have a user to create a cart but the API requires authentication to checkout</remarks>
        /// <param name="owner">Set the owner of a cart. If not specified, defaults to the calling user&#39;s id. If specified and is not the calling user&#39;s id, SHOPPING_CARTS_ADMIN permission is required</param>
        /// <param name="currencyCode">Set the currency for the cart, by currency code. May be disallowed by site settings.</param>
        /// <response code="200">the cart has been created, use the returned GUID to manage the cart</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//carts")]
        [SwaggerOperation("CreateCart")]
        [SwaggerResponse(200, type: typeof(string))]
        public virtual IActionResult CreateCart([FromQuery]int? owner, [FromQuery]string currencyCode)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns the cart with the given GUID
        /// </summary>
        
        /// <param name="id">The id of the cart</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//carts/{id}")]
        [SwaggerOperation("GetCart")]
        [SwaggerResponse(200, type: typeof(Cart))]
        public virtual IActionResult GetCart([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Cart>(exampleJson)
            : default(Cart);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a list of carts
        /// </summary>
        
        /// <param name="filterOwnerId">Filter by the id of the owner</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//carts")]
        [SwaggerOperation("GetCarts")]
        [SwaggerResponse(200, type: typeof(PageResourceCartSummary))]
        public virtual IActionResult GetCarts([FromQuery]int? filterOwnerId, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceCartSummary>(exampleJson)
            : default(PageResourceCartSummary);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns whether a cart requires shipping
        /// </summary>
        
        /// <param name="id">The id of the cart</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//carts/{id}/shippable")]
        [SwaggerOperation("GetShippable")]
        [SwaggerResponse(200, type: typeof(CartShippableResponse))]
        public virtual IActionResult GetShippable([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CartShippableResponse>(exampleJson)
            : default(CartShippableResponse);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get the list of available shipping countries per vendor
        /// </summary>
        /// <remarks>Since a cart can have multiple vendors with different shipping options, the countries are broken down by vendors. Please see notes about the response object as the fields are variable.</remarks>
        /// <param name="id">The id of the cart</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//carts/{id}/countries")]
        [SwaggerOperation("GetShippingCountries")]
        [SwaggerResponse(200, type: typeof(SampleCountriesResponse))]
        public virtual IActionResult GetShippingCountries([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SampleCountriesResponse>(exampleJson)
            : default(SampleCountriesResponse);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Removes a discount coupon from the cart
        /// </summary>
        
        /// <param name="id">The id of the cart</param>
        /// <param name="code">The SKU code of the coupon to remove</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//carts/{id}/discounts/{code}")]
        [SwaggerOperation("RemoveDiscountFromCart")]
        public virtual void RemoveDiscountFromCart([FromRoute]string id, [FromRoute]string code)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Sets the currency to use for the cart
        /// </summary>
        /// <remarks>May be disallowed by site settings.</remarks>
        /// <param name="id">The id of the cart</param>
        /// <param name="currencyCode">The code of the currency</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//carts/{id}/currency")]
        [SwaggerOperation("SetCartCurrency")]
        public virtual void SetCartCurrency([FromRoute]string id, [FromBody]string currencyCode)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Sets the owner of a cart if none is set already
        /// </summary>
        
        /// <param name="id">The id of the cart</param>
        /// <param name="userId">The id of the user</param>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//carts/{id}/owner")]
        [SwaggerOperation("SetCartOwner")]
        public virtual void SetCartOwner([FromRoute]string id, [FromBody]int? userId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Changes the quantity of an item already in the cart
        /// </summary>
        /// <remarks>A quantity of zero will remove the item from the cart altogether.</remarks>
        /// <param name="id">The id of the cart</param>
        /// <param name="cartItemRequest">The cart item request object</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//carts/{id}/items")]
        [SwaggerOperation("UpdateItemInCart")]
        public virtual void UpdateItemInCart([FromRoute]string id, [FromBody]CartItemRequest cartItemRequest)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Modifies or sets the order shipping address
        /// </summary>
        
        /// <param name="id">The id of the cart</param>
        /// <param name="cartShippingAddressRequest">The cart shipping address request object</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//carts/{id}/shipping-address")]
        [SwaggerOperation("UpdateShippingAddress")]
        public virtual void UpdateShippingAddress([FromRoute]string id, [FromBody]CartShippingAddressRequest cartShippingAddressRequest)
        { 
            throw new NotImplementedException();
        }
    }
}
