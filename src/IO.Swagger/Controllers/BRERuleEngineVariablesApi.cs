/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class BRERuleEngineVariablesApiController : Controller
    { 

        /// <summary>
        /// Get a list of variable types available
        /// </summary>
        /// <remarks>Types include integer, string, user and invoice. These are used to qualify trigger parameters and action variables with strong typing.</remarks>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/variable-types")]
        [SwaggerOperation("GetBREVariableTypes")]
        [SwaggerResponse(200, type: typeof(List<VariableTypeResource>))]
        public virtual IActionResult GetBREVariableTypes()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<VariableTypeResource>>(exampleJson)
            : default(List<VariableTypeResource>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List valid values for a type
        /// </summary>
        /// <remarks>Used to lookup users to fill in a user constant for example. Only types marked as enumerable are suppoorted here.</remarks>
        /// <param name="name">The name of the type</param>
        /// <param name="filterName">Filter results by those with names starting with this string</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/variable-types/{name}/values")]
        [SwaggerOperation("GetBREVariableValues")]
        [SwaggerResponse(200, type: typeof(PageResourceSimpleReferenceResourceobject))]
        public virtual IActionResult GetBREVariableValues([FromRoute]string name, [FromQuery]string filterName, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceSimpleReferenceResourceobject>(exampleJson)
            : default(PageResourceSimpleReferenceResourceobject);
            return new ObjectResult(example);
        }
    }
}
