/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ContentArticlesApiController : Controller
    { 

        /// <summary>
        /// Create a new article
        /// </summary>
        /// <remarks>Articles are blobs of text with titles, a category and assets. Formatting and display of the text is in the hands of the front end.</remarks>
        /// <param name="articleResource">The new article</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//content/articles")]
        [SwaggerOperation("CreateArticle")]
        [SwaggerResponse(200, type: typeof(ArticleResource))]
        public virtual IActionResult CreateArticle([FromBody]ArticleResource articleResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArticleResource>(exampleJson)
            : default(ArticleResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create an article template
        /// </summary>
        /// <remarks>Article Templates define a type of article and the properties they have</remarks>
        /// <param name="articleTemplateResource">The article template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//content/articles/templates")]
        [SwaggerOperation("CreateArticleTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult CreateArticleTemplate([FromBody]TemplateResource articleTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete an existing article
        /// </summary>
        
        /// <param name="id">The article id</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//content/articles/{id}")]
        [SwaggerOperation("DeleteArticle")]
        public virtual void DeleteArticle([FromRoute]string id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete an article template
        /// </summary>
        /// <remarks>If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects</remarks>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//content/articles/templates/{id}")]
        [SwaggerOperation("DeleteArticleTemplate")]
        public virtual void DeleteArticleTemplate([FromRoute]string id, [FromQuery]string cascade)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single article
        /// </summary>
        
        /// <param name="id">The article id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//content/articles/{id}")]
        [SwaggerOperation("GetArticle")]
        [SwaggerResponse(200, type: typeof(ArticleResource))]
        public virtual IActionResult GetArticle([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArticleResource>(exampleJson)
            : default(ArticleResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single article template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//content/articles/templates/{id}")]
        [SwaggerOperation("GetArticleTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult GetArticleTemplate([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search article templates
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//content/articles/templates")]
        [SwaggerOperation("GetArticleTemplates")]
        [SwaggerResponse(200, type: typeof(PageResourceTemplateResource))]
        public virtual IActionResult GetArticleTemplates([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceTemplateResource>(exampleJson)
            : default(PageResourceTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search articles
        /// </summary>
        /// <remarks>Get a list of articles with optional filtering. Assets will not be filled in on the resources returned. Use &#39;Get a single article&#39; to retrieve the full resource with assets for a given item as needed.</remarks>
        /// <param name="filterCategory">Filter for articles from a specific category by id</param>
        /// <param name="filterTagset">Filter for articles with specified tags (separated by comma)</param>
        /// <param name="filterTitle">Filter for articles whose title contains a string</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//content/articles")]
        [SwaggerOperation("GetArticles")]
        [SwaggerResponse(200, type: typeof(PageResourceArticleResource))]
        public virtual IActionResult GetArticles([FromQuery]string filterCategory, [FromQuery]string filterTagset, [FromQuery]string filterTitle, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceArticleResource>(exampleJson)
            : default(PageResourceArticleResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update an existing article
        /// </summary>
        
        /// <param name="id">The article id</param>
        /// <param name="articleResource">The article object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//content/articles/{id}")]
        [SwaggerOperation("UpdateArticle")]
        public virtual void UpdateArticle([FromRoute]string id, [FromBody]ArticleResource articleResource)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update an article template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="articleTemplateResource">The article template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//content/articles/templates/{id}")]
        [SwaggerOperation("UpdateArticleTemplate")]
        public virtual void UpdateArticleTemplate([FromRoute]string id, [FromBody]TemplateResource articleTemplateResource)
        { 
            throw new NotImplementedException();
        }
    }
}
