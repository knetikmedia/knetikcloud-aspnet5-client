/*
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class UsersSubscriptionsApiController : Controller
    { 

        /// <summary>
        /// Get details about a user&#39;s subscription
        /// </summary>
        
        /// <param name="userId">The id of the user</param>
        /// <param name="inventoryId">The id of the user&#39;s inventory</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/{user_id}/subscriptions/{inventory_id}")]
        [SwaggerOperation("GetSubscriptionDetailsUsingGET")]
        [SwaggerResponse(200, type: typeof(InventorySubscriptionResource))]
        public virtual IActionResult GetSubscriptionDetailsUsingGET([FromRoute]int? userId, [FromRoute]int? inventoryId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InventorySubscriptionResource>(exampleJson)
            : default(InventorySubscriptionResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get details about a user&#39;s subscriptions
        /// </summary>
        
        /// <param name="userId">The id of the user</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/{user_id}/subscriptions")]
        [SwaggerOperation("GetSubscriptionDetailsUsingGET1")]
        [SwaggerResponse(200, type: typeof(List<InventorySubscriptionResource>))]
        public virtual IActionResult GetSubscriptionDetailsUsingGET1([FromRoute]int? userId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<InventorySubscriptionResource>>(exampleJson)
            : default(List<InventorySubscriptionResource>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Reactivate a subscription and charge fee
        /// </summary>
        
        /// <param name="userId">The id of the user</param>
        /// <param name="inventoryId">The id of the user&#39;s inventory</param>
        /// <param name="reactivateSubscriptionRequest">The reactivate subscription request object inventory</param>
        /// <response code="200">OK</response>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users/{user_id}/subscriptions/{inventory_id}/reactivate")]
        [SwaggerOperation("ReactivateUsingPOST")]
        [SwaggerResponse(200, type: typeof(InvoiceResource))]
        public virtual IActionResult ReactivateUsingPOST([FromRoute]int? userId, [FromRoute]int? inventoryId, [FromBody]ReactivateSubscriptionRequest reactivateSubscriptionRequest)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InvoiceResource>(exampleJson)
            : default(InvoiceResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Set a new date to bill a subscription on
        /// </summary>
        
        /// <param name="userId">The id of the user</param>
        /// <param name="inventoryId">The id of the user&#39;s inventory</param>
        /// <param name="billDate">The new bill date. Unix timestamp in seconds</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/{user_id}/subscriptions/{inventory_id}/bill-date")]
        [SwaggerOperation("SetBillDateUsingPUT")]
        public virtual void SetBillDateUsingPUT([FromRoute]int? userId, [FromRoute]int? inventoryId, [FromBody]long? billDate)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Set the payment method to use for a subscription
        /// </summary>
        /// <remarks>May send null to use floating default</remarks>
        /// <param name="userId">The id of the user</param>
        /// <param name="inventoryId">The id of the user&#39;s inventory</param>
        /// <param name="paymentMethodId">The id of the payment method</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/{user_id}/subscriptions/{inventory_id}/payment-method")]
        [SwaggerOperation("SetPaymentMethodUsingPUT")]
        public virtual void SetPaymentMethodUsingPUT([FromRoute]int? userId, [FromRoute]int? inventoryId, [FromBody]int? paymentMethodId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Set the status of a subscription
        /// </summary>
        /// <remarks>The body is a json string (put in quotes) that should match a desired invoice status type. Note that the new status may be blocked if the system is not configured to allow the current status to be changed to the new, to enforce proper flow. The default options for statuses are shown below but may be altered for special use cases</remarks>
        /// <param name="userId">The id of the user</param>
        /// <param name="inventoryId">The id of the user&#39;s inventory</param>
        /// <param name="status">The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;)</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/{user_id}/subscriptions/{inventory_id}/status")]
        [SwaggerOperation("SetStatusUsingPUT")]
        public virtual void SetStatusUsingPUT([FromRoute]int? userId, [FromRoute]int? inventoryId, [FromBody]string status)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Set a new subscription plan for a user
        /// </summary>
        
        /// <param name="userId">The id of the user</param>
        /// <param name="inventoryId">The id of the user&#39;s inventory</param>
        /// <param name="planId">The id of the new plan. Must be from the same subscription</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/{user_id}/subscriptions/{inventory_id}/plan")]
        [SwaggerOperation("SetUserPlanUsingPUT")]
        public virtual void SetUserPlanUsingPUT([FromRoute]int? userId, [FromRoute]int? inventoryId, [FromBody]string planId)
        { 
            throw new NotImplementedException();
        }
    }
}
