/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class CampaignsApiController : Controller
    { 

        /// <summary>
        /// Add a challenge to a campaign
        /// </summary>
        
        /// <param name="id">The id of the campaign</param>
        /// <param name="challengeId">The id of the challenge</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//campaigns/{id}/challenges")]
        [SwaggerOperation("AddChallengeToCampaign")]
        public virtual void AddChallengeToCampaign([FromRoute]long? id, [FromBody]long? challengeId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Create a campaign
        /// </summary>
        
        /// <param name="campaignResource">The campaign resource object</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//campaigns")]
        [SwaggerOperation("CreateCampaign")]
        [SwaggerResponse(200, type: typeof(CampaignResource))]
        public virtual IActionResult CreateCampaign([FromBody]CampaignResource campaignResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CampaignResource>(exampleJson)
            : default(CampaignResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create a campaign template
        /// </summary>
        /// <remarks>Campaign Templates define a type of campaign and the properties they have</remarks>
        /// <param name="campaignTemplateResource">The campaign template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//campaigns/templates")]
        [SwaggerOperation("CreateCampaignTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult CreateCampaignTemplate([FromBody]TemplateResource campaignTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a campaign
        /// </summary>
        
        /// <param name="id">The campaign id</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//campaigns/{id}")]
        [SwaggerOperation("DeleteCampaign")]
        public virtual void DeleteCampaign([FromRoute]long? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete a campaign template
        /// </summary>
        /// <remarks>If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects</remarks>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//campaigns/templates/{id}")]
        [SwaggerOperation("DeleteCampaignTemplate")]
        public virtual void DeleteCampaignTemplate([FromRoute]string id, [FromQuery]string cascade)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Returns a single campaign
        /// </summary>
        
        /// <param name="id">The campaign id</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//campaigns/{id}")]
        [SwaggerOperation("GetCampaign")]
        [SwaggerResponse(200, type: typeof(CampaignResource))]
        public virtual IActionResult GetCampaign([FromRoute]long? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CampaignResource>(exampleJson)
            : default(CampaignResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List the challenges associated with a campaign
        /// </summary>
        
        /// <param name="id">The campaign id</param>
        /// <param name="filterStartDate">A comma separated string without spaces.  First value is the operator to search on, second value is the challenge start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).</param>
        /// <param name="filterEndDate">A comma separated string without spaces.  First value is the operator to search on, second value is the challenge end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//campaigns/{id}/challenges")]
        [SwaggerOperation("GetCampaignChallenges")]
        [SwaggerResponse(200, type: typeof(PageResourceChallengeResource))]
        public virtual IActionResult GetCampaignChallenges([FromRoute]long? id, [FromQuery]string filterStartDate, [FromQuery]string filterEndDate, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceChallengeResource>(exampleJson)
            : default(PageResourceChallengeResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single campaign template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//campaigns/templates/{id}")]
        [SwaggerOperation("GetCampaignTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult GetCampaignTemplate([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search campaign templates
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//campaigns/templates")]
        [SwaggerOperation("GetCampaignTemplates")]
        [SwaggerResponse(200, type: typeof(PageResourceTemplateResource))]
        public virtual IActionResult GetCampaignTemplates([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceTemplateResource>(exampleJson)
            : default(PageResourceTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search campaigns
        /// </summary>
        
        /// <param name="filterActive">Filter for campaigns that are active</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//campaigns")]
        [SwaggerOperation("GetCampaigns")]
        [SwaggerResponse(200, type: typeof(PageResourceCampaignResource))]
        public virtual IActionResult GetCampaigns([FromQuery]bool? filterActive, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceCampaignResource>(exampleJson)
            : default(PageResourceCampaignResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Remove a challenge from a campaign
        /// </summary>
        
        /// <param name="campaignId">The campaign id</param>
        /// <param name="id">The challenge id</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//campaigns/{campaign_id}/challenges/{id}")]
        [SwaggerOperation("RemoveChallengeFromCampaign")]
        public virtual void RemoveChallengeFromCampaign([FromRoute]long? campaignId, [FromRoute]long? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update a campaign
        /// </summary>
        
        /// <param name="id">The campaign id</param>
        /// <param name="campaignResource">The campaign resource object</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//campaigns/{id}")]
        [SwaggerOperation("UpdateCampaign")]
        [SwaggerResponse(200, type: typeof(CampaignResource))]
        public virtual IActionResult UpdateCampaign([FromRoute]long? id, [FromBody]CampaignResource campaignResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CampaignResource>(exampleJson)
            : default(CampaignResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update an campaign template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="campaignTemplateResource">The campaign template resource object</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//campaigns/templates/{id}")]
        [SwaggerOperation("UpdateCampaignTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult UpdateCampaignTemplate([FromRoute]string id, [FromBody]TemplateResource campaignTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }
    }
}
