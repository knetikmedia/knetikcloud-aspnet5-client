/*
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class CampaignsApiController : Controller
    { 

        /// <summary>
        /// Add a challenge to a campaign
        /// </summary>
        
        /// <param name="id">The id of the campaign</param>
        /// <param name="challengeId">The id of the challenge</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//campaigns/{id}/challenges")]
        [SwaggerOperation("AddChallengesUsingPOST")]
        public virtual void AddChallengesUsingPOST([FromRoute]long? id, [FromBody]long? challengeId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Create a campaign template
        /// </summary>
        /// <remarks>Campaign Templates define a type of campaign and the properties they have</remarks>
        /// <param name="campaignTemplateResource">The campaign template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//campaigns/templates")]
        [SwaggerOperation("CreateCampaignTemplateUsingPOST")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult CreateCampaignTemplateUsingPOST([FromBody]TemplateResource campaignTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create a campaign
        /// </summary>
        
        /// <param name="campaignResource">The campaign resource object</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//campaigns")]
        [SwaggerOperation("CreateCampaignUsingPOST")]
        [SwaggerResponse(200, type: typeof(CampaignResource))]
        public virtual IActionResult CreateCampaignUsingPOST([FromBody]CampaignResource campaignResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CampaignResource>(exampleJson)
            : default(CampaignResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a campaign template
        /// </summary>
        /// <remarks>If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects</remarks>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//campaigns/templates/{id}")]
        [SwaggerOperation("DeleteCampaignTemplateUsingDELETE")]
        public virtual void DeleteCampaignTemplateUsingDELETE([FromRoute]string id, [FromQuery]string cascade)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete a campaign
        /// </summary>
        
        /// <param name="id">The campaign id</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//campaigns/{id}")]
        [SwaggerOperation("DeleteCampaignUsingDELETE")]
        public virtual void DeleteCampaignUsingDELETE([FromRoute]long? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single campaign template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//campaigns/templates/{id}")]
        [SwaggerOperation("GetCampaignTemplateUsingGET")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult GetCampaignTemplateUsingGET([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search campaign templates
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//campaigns/templates")]
        [SwaggerOperation("GetCampaignTemplatesUsingGET")]
        [SwaggerResponse(200, type: typeof(PageTemplateResource))]
        public virtual IActionResult GetCampaignTemplatesUsingGET([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageTemplateResource>(exampleJson)
            : default(PageTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns a single campaign
        /// </summary>
        
        /// <param name="id">The campaign id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//campaigns/{id}")]
        [SwaggerOperation("GetCampaignUsingGET")]
        [SwaggerResponse(200, type: typeof(CampaignResource))]
        public virtual IActionResult GetCampaignUsingGET([FromRoute]long? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CampaignResource>(exampleJson)
            : default(CampaignResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search campaigns
        /// </summary>
        
        /// <param name="filterActive">Filter for campaigns that are active</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//campaigns")]
        [SwaggerOperation("GetCampaignsUsingGET")]
        [SwaggerResponse(200, type: typeof(PageCampaignResource))]
        public virtual IActionResult GetCampaignsUsingGET([FromQuery]bool? filterActive, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageCampaignResource>(exampleJson)
            : default(PageCampaignResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List the challenges associated with a campaign
        /// </summary>
        
        /// <param name="id">The campaign id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//campaigns/{id}/challenges")]
        [SwaggerOperation("GetChallengesUsingGET")]
        [SwaggerResponse(200, type: typeof(PageChallengeResource))]
        public virtual IActionResult GetChallengesUsingGET([FromRoute]long? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageChallengeResource>(exampleJson)
            : default(PageChallengeResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Remove a challenge from a campaign
        /// </summary>
        
        /// <param name="campaignId">The campaign id</param>
        /// <param name="id">The challenge id</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//campaigns/{campaign_id}/challenges/{id}")]
        [SwaggerOperation("RemoveChallengeUsingDELETE")]
        public virtual void RemoveChallengeUsingDELETE([FromRoute]long? campaignId, [FromRoute]long? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update an campaign template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="campaignTemplateResource">The campaign template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//campaigns/templates/{id}")]
        [SwaggerOperation("UpdateCampaignTemplateUsingPUT")]
        public virtual void UpdateCampaignTemplateUsingPUT([FromRoute]string id, [FromBody]TemplateResource campaignTemplateResource)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update a campaign
        /// </summary>
        
        /// <param name="id">The campaign id</param>
        /// <param name="campaignResource">The campaign resource object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//campaigns/{id}")]
        [SwaggerOperation("UpdateCampaignUsingPUT")]
        public virtual void UpdateCampaignUsingPUT([FromRoute]long? id, [FromBody]CampaignResource campaignResource)
        { 
            throw new NotImplementedException();
        }
    }
}
