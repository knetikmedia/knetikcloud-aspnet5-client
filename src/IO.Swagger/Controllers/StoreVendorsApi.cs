/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class StoreVendorsApiController : Controller
    { 

        /// <summary>
        /// Create a vendor
        /// </summary>
        
        /// <param name="vendor">The vendor</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//vendors")]
        [SwaggerOperation("CreateVendor")]
        [SwaggerResponse(200, type: typeof(VendorResource))]
        public virtual IActionResult CreateVendor([FromBody]VendorResource vendor)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VendorResource>(exampleJson)
            : default(VendorResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create a vendor template
        /// </summary>
        /// <remarks>Vendor Templates define a type of vendor and the properties they have.</remarks>
        /// <param name="vendorTemplateResource">The new vendor template</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//vendors/templates")]
        [SwaggerOperation("CreateVendorTemplate")]
        [SwaggerResponse(200, type: typeof(ItemTemplateResource))]
        public virtual IActionResult CreateVendorTemplate([FromBody]ItemTemplateResource vendorTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ItemTemplateResource>(exampleJson)
            : default(ItemTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a vendor
        /// </summary>
        
        /// <param name="id">The id of the vendor</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//vendors/{id}")]
        [SwaggerOperation("DeleteVendor")]
        public virtual void DeleteVendor([FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete a vendor template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//vendors/templates/{id}")]
        [SwaggerOperation("DeleteVendorTemplate")]
        public virtual void DeleteVendorTemplate([FromRoute]string id, [FromQuery]string cascade)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single vendor
        /// </summary>
        
        /// <param name="id">The id of the vendor</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//vendors/{id}")]
        [SwaggerOperation("GetVendor")]
        [SwaggerResponse(200, type: typeof(VendorResource))]
        public virtual IActionResult GetVendor([FromRoute]int? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VendorResource>(exampleJson)
            : default(VendorResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single vendor template
        /// </summary>
        /// <remarks>Vendor Templates define a type of vendor and the properties they have.</remarks>
        /// <param name="id">The id of the template</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//vendors/templates/{id}")]
        [SwaggerOperation("GetVendorTemplate")]
        [SwaggerResponse(200, type: typeof(ItemTemplateResource))]
        public virtual IActionResult GetVendorTemplate([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ItemTemplateResource>(exampleJson)
            : default(ItemTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search vendor templates
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//vendors/templates")]
        [SwaggerOperation("GetVendorTemplates")]
        [SwaggerResponse(200, type: typeof(PageResourceItemTemplateResource))]
        public virtual IActionResult GetVendorTemplates([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceItemTemplateResource>(exampleJson)
            : default(PageResourceItemTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search vendors
        /// </summary>
        
        /// <param name="filterName">Filters vendors by name starting with the text provided in the filter</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//vendors")]
        [SwaggerOperation("GetVendors")]
        [SwaggerResponse(200, type: typeof(PageResourceVendorResource))]
        public virtual IActionResult GetVendors([FromQuery]string filterName, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceVendorResource>(exampleJson)
            : default(PageResourceVendorResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a vendor
        /// </summary>
        
        /// <param name="id">The id of the vendor</param>
        /// <param name="vendor">The vendor</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//vendors/{id}")]
        [SwaggerOperation("UpdateVendor")]
        [SwaggerResponse(200, type: typeof(VendorResource))]
        public virtual IActionResult UpdateVendor([FromRoute]int? id, [FromBody]VendorResource vendor)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VendorResource>(exampleJson)
            : default(VendorResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a vendor template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="vendorTemplateResource">The vendor template resource object</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//vendors/templates/{id}")]
        [SwaggerOperation("UpdateVendorTemplate")]
        [SwaggerResponse(200, type: typeof(ItemTemplateResource))]
        public virtual IActionResult UpdateVendorTemplate([FromRoute]string id, [FromBody]ItemTemplateResource vendorTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ItemTemplateResource>(exampleJson)
            : default(ItemTemplateResource);
            return new ObjectResult(example);
        }
    }
}
