/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class PaymentsApiController : Controller
    { 

        /// <summary>
        /// Create a new payment method for a user
        /// </summary>
        
        /// <param name="userId">ID of the user for whom the payment method is being created</param>
        /// <param name="paymentMethod">Payment method being created</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users/{user_id}/payment-methods")]
        [SwaggerOperation("CreatePaymentMethodUsingPOST")]
        [SwaggerResponse(200, type: typeof(PaymentMethodResource))]
        public virtual IActionResult CreatePaymentMethodUsingPOST([FromRoute]int? userId, [FromBody]PaymentMethodResource paymentMethod)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PaymentMethodResource>(exampleJson)
            : default(PaymentMethodResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete an existing payment method for a user
        /// </summary>
        
        /// <param name="userId">ID of the user for whom the payment method is being updated</param>
        /// <param name="id">ID of the payment method being deleted</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//users/{user_id}/payment-methods/{id}")]
        [SwaggerOperation("DeletePaymentMethodUsingDELETE")]
        public virtual void DeletePaymentMethodUsingDELETE([FromRoute]int? userId, [FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single payment method for a user
        /// </summary>
        
        /// <param name="userId">ID of the user for whom the payment method is being retrieved</param>
        /// <param name="id">ID of the payment method being retrieved</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/{user_id}/payment-methods/{id}")]
        [SwaggerOperation("GetPaymentMethodUsingGET")]
        [SwaggerResponse(200, type: typeof(PaymentMethodResource))]
        public virtual IActionResult GetPaymentMethodUsingGET([FromRoute]int? userId, [FromRoute]int? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PaymentMethodResource>(exampleJson)
            : default(PaymentMethodResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get all payment methods for a user
        /// </summary>
        
        /// <param name="userId">ID of the user for whom the payment methods are being retrieved</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/{user_id}/payment-methods")]
        [SwaggerOperation("GetPaymentMethodsUsingGET")]
        [SwaggerResponse(200, type: typeof(List<PaymentMethodResource>))]
        public virtual IActionResult GetPaymentMethodsUsingGET([FromRoute]int? userId, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PaymentMethodResource>>(exampleJson)
            : default(List<PaymentMethodResource>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Authorize payment of an invoice for later capture
        /// </summary>
        
        /// <param name="request">Payment authorization request</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//payment/authorizations")]
        [SwaggerOperation("PaymentAuthorizationUsingPOST")]
        [SwaggerResponse(200, type: typeof(PaymentAuthorizationResource))]
        public virtual IActionResult PaymentAuthorizationUsingPOST([FromBody]PaymentAuthorizationResource request)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PaymentAuthorizationResource>(exampleJson)
            : default(PaymentAuthorizationResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Capture an existing invoice payment authorization
        /// </summary>
        
        /// <param name="id">ID of the payment authorization to capture</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//payment/authorizations/{id}/capture")]
        [SwaggerOperation("PaymentCaptureUsingPOST")]
        public virtual void PaymentCaptureUsingPOST([FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update an existing payment method for a user
        /// </summary>
        
        /// <param name="userId">ID of the user for whom the payment method is being updated</param>
        /// <param name="id">ID of the payment method being updated</param>
        /// <param name="paymentMethod">The updated payment method data</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/{user_id}/payment-methods/{id}")]
        [SwaggerOperation("UpdatePaymentMethodUsingPUT")]
        public virtual void UpdatePaymentMethodUsingPUT([FromRoute]int? userId, [FromRoute]int? id, [FromBody]PaymentMethodResource paymentMethod)
        { 
            throw new NotImplementedException();
        }
    }
}
