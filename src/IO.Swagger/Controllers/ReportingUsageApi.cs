/*
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ReportingUsageApiController : Controller
    { 

        /// <summary>
        /// Returns aggregated endpoint usage information by the day
        /// </summary>
        
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//reporting/usage/day")]
        [SwaggerOperation("GetUsageByDayUsingGET")]
        [SwaggerResponse(200, type: typeof(PageUsageInfo))]
        public virtual IActionResult GetUsageByDayUsingGET([FromQuery]long? startDate, [FromQuery]long? endDate, [FromQuery]bool? combineEndpoints, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageUsageInfo>(exampleJson)
            : default(PageUsageInfo);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns aggregated endpoint usage information by hour
        /// </summary>
        
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//reporting/usage/hour")]
        [SwaggerOperation("GetUsageByHourUsingGET")]
        [SwaggerResponse(200, type: typeof(PageUsageInfo))]
        public virtual IActionResult GetUsageByHourUsingGET([FromQuery]long? startDate, [FromQuery]long? endDate, [FromQuery]bool? combineEndpoints, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageUsageInfo>(exampleJson)
            : default(PageUsageInfo);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns aggregated endpoint usage information by minute
        /// </summary>
        
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//reporting/usage/minute")]
        [SwaggerOperation("GetUsageByMinuteUsingGET")]
        [SwaggerResponse(200, type: typeof(PageUsageInfo))]
        public virtual IActionResult GetUsageByMinuteUsingGET([FromQuery]long? startDate, [FromQuery]long? endDate, [FromQuery]bool? combineEndpoints, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageUsageInfo>(exampleJson)
            : default(PageUsageInfo);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns aggregated endpoint usage information by month
        /// </summary>
        
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//reporting/usage/month")]
        [SwaggerOperation("GetUsageByMonthUsingGET")]
        [SwaggerResponse(200, type: typeof(PageUsageInfo))]
        public virtual IActionResult GetUsageByMonthUsingGET([FromQuery]long? startDate, [FromQuery]long? endDate, [FromQuery]bool? combineEndpoints, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageUsageInfo>(exampleJson)
            : default(PageUsageInfo);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns aggregated endpoint usage information by year
        /// </summary>
        
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//reporting/usage/year")]
        [SwaggerOperation("GetUsageByYearUsingGET")]
        [SwaggerResponse(200, type: typeof(PageUsageInfo))]
        public virtual IActionResult GetUsageByYearUsingGET([FromQuery]long? startDate, [FromQuery]long? endDate, [FromQuery]bool? combineEndpoints, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageUsageInfo>(exampleJson)
            : default(PageUsageInfo);
            return new ObjectResult(example);
        }
    }
}
