/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class GamificationLeaderboardsApiController : Controller
    { 

        /// <summary>
        /// Retrieves leaderboard details and paginated entries
        /// </summary>
        /// <remarks>The context type identifies the type of entity (i.e., &#39;activity&#39;) being tracked on the leaderboard. The context ID is the unique ID of the actual entity tracked by the leaderboard.</remarks>
        /// <param name="contextType">The context type for the leaderboard</param>
        /// <param name="contextId">The context id for the leaderboard</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//leaderboards/{context_type}/{context_id}")]
        [SwaggerOperation("GetLeaderboardUsingGET")]
        [SwaggerResponse(200, type: typeof(LeaderboardResource))]
        public virtual IActionResult GetLeaderboardUsingGET([FromRoute]string contextType, [FromRoute]string contextId, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<LeaderboardResource>(exampleJson)
            : default(LeaderboardResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a list of available leaderboard strategy names
        /// </summary>
        
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//leaderboards/strategies")]
        [SwaggerOperation("GetStrategiesUsingGET")]
        [SwaggerResponse(200, type: typeof(List<string>))]
        public virtual IActionResult GetStrategiesUsingGET()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
            : default(List<string>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrieves a specific user entry with rank
        /// </summary>
        /// <remarks>The context type identifies the type of entity (i.e., &#39;activity&#39;) being tracked on the leaderboard. The context ID is the unique ID of the actual entity tracked by the leaderboard</remarks>
        /// <param name="contextType">The context type for the leaderboard</param>
        /// <param name="contextId">The context id for the leaderboard</param>
        /// <param name="id">The id of a user</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//leaderboards/{context_type}/{context_id}/users/{id}/rank")]
        [SwaggerOperation("GetUserRankUsingGET")]
        [SwaggerResponse(200, type: typeof(LeaderboardEntryResource))]
        public virtual IActionResult GetUserRankUsingGET([FromRoute]string contextType, [FromRoute]string contextId, [FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<LeaderboardEntryResource>(exampleJson)
            : default(LeaderboardEntryResource);
            return new ObjectResult(example);
        }
    }
}
