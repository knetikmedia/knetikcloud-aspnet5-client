/*
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class BRERuleEngineCategoriesApiController : Controller
    { 

        /// <summary>
        /// Create a BRE category template
        /// </summary>
        /// <remarks>Templates define a type of BRE category and the properties they have</remarks>
        /// <param name="template">The category template to create</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//bre/categories/templates")]
        [SwaggerOperation("CreateTemplateUsingPOST1")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult CreateTemplateUsingPOST1([FromBody]TemplateResource template)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a BRE category template
        /// </summary>
        /// <remarks>If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects</remarks>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//bre/categories/templates/{id}")]
        [SwaggerOperation("DeleteTemplateUsingDELETE")]
        public virtual void DeleteTemplateUsingDELETE([FromRoute]string id, [FromQuery]string cascade)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// List categories
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/categories")]
        [SwaggerOperation("GetCategoriesUsingGET")]
        [SwaggerResponse(200, type: typeof(PageBreCategoryResource))]
        public virtual IActionResult GetCategoriesUsingGET([FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageBreCategoryResource>(exampleJson)
            : default(PageBreCategoryResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single category
        /// </summary>
        
        /// <param name="name">The category name</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/categories/{name}")]
        [SwaggerOperation("GetCategoryUsingGET")]
        [SwaggerResponse(200, type: typeof(BreCategoryResource))]
        public virtual IActionResult GetCategoryUsingGET([FromRoute]string name)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BreCategoryResource>(exampleJson)
            : default(BreCategoryResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single BRE category template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/categories/templates/{id}")]
        [SwaggerOperation("GetTemplateUsingGET")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult GetTemplateUsingGET([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search BRE category templates
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/categories/templates")]
        [SwaggerOperation("GetTemplatesUsingGET")]
        [SwaggerResponse(200, type: typeof(PageTemplateResource))]
        public virtual IActionResult GetTemplatesUsingGET([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageTemplateResource>(exampleJson)
            : default(PageTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a category
        /// </summary>
        
        /// <param name="name">The category name</param>
        /// <param name="category">The updated BRE category information</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//bre/categories/{name}")]
        [SwaggerOperation("UpdateCategoryUsingPUT")]
        public virtual void UpdateCategoryUsingPUT([FromRoute]string name, [FromBody]BreCategoryResource category)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update a BRE category template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated category template definition</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//bre/categories/templates/{id}")]
        [SwaggerOperation("UpdateTemplateUsingPUT1")]
        public virtual void UpdateTemplateUsingPUT1([FromRoute]string id, [FromBody]TemplateResource template)
        { 
            throw new NotImplementedException();
        }
    }
}
