/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class UsersFriendshipsApiController : Controller
    { 

        /// <summary>
        /// Add a friend
        /// </summary>
        /// <remarks>As a user, either creates or confirm a pending request. As an admin, call this endpoint twice while inverting the IDs to create a confirmed friendship.</remarks>
        /// <param name="userId">The id of the user or &#39;me&#39; if logged in</param>
        /// <param name="id">The id of the user to befriend</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users/{user_id}/friends/{id}")]
        [SwaggerOperation("AddFriend")]
        public virtual void AddFriend([FromRoute]string userId, [FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get friends list
        /// </summary>
        
        /// <param name="userId">The id of the user or &#39;me&#39;</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/{user_id}/friends")]
        [SwaggerOperation("GetFriends")]
        [SwaggerResponse(200, type: typeof(PageResourceSimpleUserResource))]
        public virtual IActionResult GetFriends([FromRoute]string userId, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceSimpleUserResource>(exampleJson)
            : default(PageResourceSimpleUserResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns the invite token
        /// </summary>
        /// <remarks>This is a unique invite token that allows direct connection to the request user.  Exposing that token presents privacy issues if the token is leaked. Use friend request flow instead if confirmation is required</remarks>
        /// <param name="userId">The id of the user or &#39;me&#39; if logged in</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/{user_id}/invite-token")]
        [SwaggerOperation("GetInviteToken")]
        [SwaggerResponse(200, type: typeof(string))]
        public virtual IActionResult GetInviteToken([FromRoute]string userId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get pending invites
        /// </summary>
        /// <remarks>Invites that the specified user received</remarks>
        /// <param name="userId">The id of the user or &#39;me&#39;</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/{user_id}/invites")]
        [SwaggerOperation("GetInvites")]
        [SwaggerResponse(200, type: typeof(PageResourceSimpleUserResource))]
        public virtual IActionResult GetInvites([FromRoute]string userId, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceSimpleUserResource>(exampleJson)
            : default(PageResourceSimpleUserResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Redeem friendship token
        /// </summary>
        /// <remarks>Immediately connects the requested user with the user mapped by the provided invite token</remarks>
        /// <param name="userId">The id of the user or &#39;me&#39; if logged in</param>
        /// <param name="token">The invite token</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users/{user_id}/friends/tokens")]
        [SwaggerOperation("RedeemFriendshipToken")]
        public virtual void RedeemFriendshipToken([FromRoute]string userId, [FromBody]string token)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Remove or decline a friend
        /// </summary>
        
        /// <param name="userId">The id of the user or &#39;me&#39; if logged in</param>
        /// <param name="id">The id of the user to befriend</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//users/{user_id}/friends/{id}")]
        [SwaggerOperation("RemoveOrDeclineFriend")]
        public virtual void RemoveOrDeclineFriend([FromRoute]string userId, [FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }
    }
}
