/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class AuthRolesApiController : Controller
    { 

        /// <summary>
        /// Create a new role
        /// </summary>
        
        /// <param name="roleResource">The role resource object</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//auth/roles")]
        [SwaggerOperation("CreateRole")]
        [SwaggerResponse(200, type: typeof(RoleResource))]
        public virtual IActionResult CreateRole([FromBody]RoleResource roleResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RoleResource>(exampleJson)
            : default(RoleResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a role
        /// </summary>
        
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//auth/roles/{role}")]
        [SwaggerOperation("DeleteRole")]
        public virtual void DeleteRole([FromRoute]string role, [FromQuery]bool? force)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get roles for a client
        /// </summary>
        
        /// <param name="clientKey">The client key</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//auth/clients/{client_key}/roles")]
        [SwaggerOperation("GetClientRoles")]
        [SwaggerResponse(200, type: typeof(List<RoleResource>))]
        public virtual IActionResult GetClientRoles([FromRoute]string clientKey)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<RoleResource>>(exampleJson)
            : default(List<RoleResource>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single role
        /// </summary>
        
        /// <param name="role">The role value</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//auth/roles/{role}")]
        [SwaggerOperation("GetRole")]
        [SwaggerResponse(200, type: typeof(RoleResource))]
        public virtual IActionResult GetRole([FromRoute]string role)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RoleResource>(exampleJson)
            : default(RoleResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search roles
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//auth/roles")]
        [SwaggerOperation("GetRoles")]
        [SwaggerResponse(200, type: typeof(PageResourceRoleResource))]
        public virtual IActionResult GetRoles([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceRoleResource>(exampleJson)
            : default(PageResourceRoleResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get roles for a user
        /// </summary>
        
        /// <param name="userId">The user&#39;s id</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//auth/users/{user_id}/roles")]
        [SwaggerOperation("GetUserRoles")]
        [SwaggerResponse(200, type: typeof(List<RoleResource>))]
        public virtual IActionResult GetUserRoles([FromRoute]int? userId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<RoleResource>>(exampleJson)
            : default(List<RoleResource>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Set roles for a client
        /// </summary>
        
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//auth/clients/{client_key}/roles")]
        [SwaggerOperation("SetClientRoles")]
        [SwaggerResponse(200, type: typeof(ClientResource))]
        public virtual IActionResult SetClientRoles([FromRoute]string clientKey, [FromBody]List<string> rolesList)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ClientResource>(exampleJson)
            : default(ClientResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Set permissions for a role
        /// </summary>
        
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//auth/roles/{role}/permissions")]
        [SwaggerOperation("SetPermissionsForRole")]
        [SwaggerResponse(200, type: typeof(RoleResource))]
        public virtual IActionResult SetPermissionsForRole([FromRoute]string role, [FromBody]List<string> permissionsList)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RoleResource>(exampleJson)
            : default(RoleResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Set roles for a user
        /// </summary>
        
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//auth/users/{user_id}/roles")]
        [SwaggerOperation("SetUserRoles")]
        [SwaggerResponse(200, type: typeof(UserResource))]
        public virtual IActionResult SetUserRoles([FromRoute]int? userId, [FromBody]List<string> rolesList)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserResource>(exampleJson)
            : default(UserResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a role
        /// </summary>
        
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//auth/roles/{role}")]
        [SwaggerOperation("UpdateRole")]
        [SwaggerResponse(200, type: typeof(RoleResource))]
        public virtual IActionResult UpdateRole([FromRoute]string role, [FromBody]RoleResource roleResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RoleResource>(exampleJson)
            : default(RoleResource);
            return new ObjectResult(example);
        }
    }
}
