/*
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ReportingRevenueApiController : Controller
    { 

        /// <summary>
        /// Get revenue info by country
        /// </summary>
        /// <remarks>Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top</remarks>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//reporting/revenue/countries/{currency_code}")]
        [SwaggerOperation("ExecutiveRevenueCountrySalesUsingGET")]
        [SwaggerResponse(200, type: typeof(PageRevenueCountryReportResource))]
        public virtual IActionResult ExecutiveRevenueCountrySalesUsingGET([FromRoute]string currencyCode, [FromQuery]long? startDate, [FromQuery]long? endDate, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageRevenueCountryReportResource>(exampleJson)
            : default(PageRevenueCountryReportResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get item revenue info
        /// </summary>
        /// <remarks>Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range</remarks>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//reporting/revenue/item-sales/{currency_code}")]
        [SwaggerOperation("ExecutiveRevenueItemSalesUsingGET")]
        [SwaggerResponse(200, type: typeof(RevenueReportResource))]
        public virtual IActionResult ExecutiveRevenueItemSalesUsingGET([FromRoute]string currencyCode, [FromQuery]long? startDate, [FromQuery]long? endDate)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RevenueReportResource>(exampleJson)
            : default(RevenueReportResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get revenue info by item
        /// </summary>
        /// <remarks>Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top</remarks>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//reporting/revenue/products/{currency_code}")]
        [SwaggerOperation("ExecutiveRevenueProductSalesUsingGET")]
        [SwaggerResponse(200, type: typeof(PageRevenueProductReportResource))]
        public virtual IActionResult ExecutiveRevenueProductSalesUsingGET([FromRoute]string currencyCode, [FromQuery]long? startDate, [FromQuery]long? endDate, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageRevenueProductReportResource>(exampleJson)
            : default(PageRevenueProductReportResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get refund revenue info
        /// </summary>
        /// <remarks>Get basic info about revenue loss from refunds (for all item types), summed up within a time range.</remarks>
        /// <param name="currencyCode">The code for a currency to get refund data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//reporting/revenue/refunds/{currency_code}")]
        [SwaggerOperation("ExecutiveRevenueRefundsUsingGET")]
        [SwaggerResponse(200, type: typeof(RevenueReportResource))]
        public virtual IActionResult ExecutiveRevenueRefundsUsingGET([FromRoute]string currencyCode, [FromQuery]long? startDate, [FromQuery]long? endDate)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RevenueReportResource>(exampleJson)
            : default(RevenueReportResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get subscription revenue info
        /// </summary>
        /// <remarks>Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range</remarks>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//reporting/revenue/subscription-sales/{currency_code}")]
        [SwaggerOperation("ExecutiveRevenueSubscriptionSalesUsingGET")]
        [SwaggerResponse(200, type: typeof(RevenueReportResource))]
        public virtual IActionResult ExecutiveRevenueSubscriptionSalesUsingGET([FromRoute]string currencyCode, [FromQuery]long? startDate, [FromQuery]long? endDate)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RevenueReportResource>(exampleJson)
            : default(RevenueReportResource);
            return new ObjectResult(example);
        }
    }
}
