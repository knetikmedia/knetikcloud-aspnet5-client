/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ConfigsApiController : Controller
    { 

        /// <summary>
        /// Create a new config
        /// </summary>
        
        /// <param name="config">The config object</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//configs")]
        [SwaggerOperation("CreateConfig")]
        [SwaggerResponse(200, type: typeof(Config))]
        public virtual IActionResult CreateConfig([FromBody]Config config)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Config>(exampleJson)
            : default(Config);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete an existing config
        /// </summary>
        
        /// <param name="name">The config name</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//configs/{name}")]
        [SwaggerOperation("DeleteConfig")]
        public virtual void DeleteConfig([FromRoute]string name)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single config
        /// </summary>
        /// <remarks>Only configs that are public readable will be shown without admin access</remarks>
        /// <param name="name">The config name</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//configs/{name}")]
        [SwaggerOperation("GetConfig")]
        [SwaggerResponse(200, type: typeof(Config))]
        public virtual IActionResult GetConfig([FromRoute]string name)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Config>(exampleJson)
            : default(Config);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search configs
        /// </summary>
        
        /// <param name="filterSearch">Filter for configs whose name contains the given string</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//configs")]
        [SwaggerOperation("GetConfigs")]
        [SwaggerResponse(200, type: typeof(PageResourceConfig))]
        public virtual IActionResult GetConfigs([FromQuery]string filterSearch, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceConfig>(exampleJson)
            : default(PageResourceConfig);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update an existing config
        /// </summary>
        
        /// <param name="name">The config name</param>
        /// <param name="config">The config object</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//configs/{name}")]
        [SwaggerOperation("UpdateConfig")]
        public virtual void UpdateConfig([FromRoute]string name, [FromBody]Config config)
        { 
            throw new NotImplementedException();
        }
    }
}
