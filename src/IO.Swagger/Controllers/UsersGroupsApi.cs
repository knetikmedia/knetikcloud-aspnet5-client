/*
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class UsersGroupsApiController : Controller
    { 

        /// <summary>
        /// Adds a new group in the system
        /// </summary>
        
        /// <param name="groupResource">The new group</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users/groups")]
        [SwaggerOperation("AddGroupUsingPOST")]
        [SwaggerResponse(200, type: typeof(GroupResource))]
        public virtual IActionResult AddGroupUsingPOST([FromBody]GroupResource groupResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GroupResource>(exampleJson)
            : default(GroupResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Adds a new member to the group
        /// </summary>
        
        /// <param name="uniqueName">The group unique name</param>
        /// <param name="username">The username of a user to add to the group</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users/groups/{unique_name}/members")]
        [SwaggerOperation("AddMemberUsingPOST")]
        [SwaggerResponse(200, type: typeof(GroupMemberResource))]
        public virtual IActionResult AddMemberUsingPOST([FromRoute]string uniqueName, [FromBody]GroupMemberResource username)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GroupMemberResource>(exampleJson)
            : default(GroupMemberResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create a group template
        /// </summary>
        /// <remarks>Group Templates define a type of group and the properties they have</remarks>
        /// <param name="groupTemplateResource">The group template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users/groups/templates")]
        [SwaggerOperation("CreateGroupTemplateUsingPOST")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult CreateGroupTemplateUsingPOST([FromBody]TemplateResource groupTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a group template
        /// </summary>
        /// <remarks>If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects</remarks>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//users/groups/templates/{id}")]
        [SwaggerOperation("DeleteGroupTemplateUsingDELETE")]
        public virtual void DeleteGroupTemplateUsingDELETE([FromRoute]string id, [FromQuery]string cascade)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Removes a user from a group
        /// </summary>
        
        /// <param name="uniqueName">The group unique name</param>
        /// <param name="userId">The id of the user to remove</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//users/groups/{unique_name}/members/{user_id}")]
        [SwaggerOperation("DeleteGroupUsingDELETE")]
        public virtual void DeleteGroupUsingDELETE([FromRoute]string uniqueName, [FromRoute]int? userId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Removes a group from the system IF no resources are attached to it
        /// </summary>
        
        /// <param name="uniqueName">The group unique name</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//users/groups/{unique_name}")]
        [SwaggerOperation("DeleteGroupUsingDELETE1")]
        public virtual void DeleteGroupUsingDELETE1([FromRoute]string uniqueName)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single group template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/groups/templates/{id}")]
        [SwaggerOperation("GetGroupTemplateUsingGET")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult GetGroupTemplateUsingGET([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search group templates
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/groups/templates")]
        [SwaggerOperation("GetGroupTemplatesUsingGET")]
        [SwaggerResponse(200, type: typeof(PageResourceTemplateResource))]
        public virtual IActionResult GetGroupTemplatesUsingGET([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceTemplateResource>(exampleJson)
            : default(PageResourceTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Loads a specific group&#39;s details
        /// </summary>
        
        /// <param name="uniqueName">The group unique name</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/groups/{unique_name}")]
        [SwaggerOperation("GetGroupUsingGET")]
        [SwaggerResponse(200, type: typeof(GroupResource))]
        public virtual IActionResult GetGroupUsingGET([FromRoute]string uniqueName)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GroupResource>(exampleJson)
            : default(GroupResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Lists members of the group
        /// </summary>
        
        /// <param name="uniqueName">The group unique name</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/groups/{unique_name}/members")]
        [SwaggerOperation("SearchGroupsUsingGET")]
        [SwaggerResponse(200, type: typeof(PageResourceGroupMemberResource))]
        public virtual IActionResult SearchGroupsUsingGET([FromRoute]string uniqueName, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceGroupMemberResource>(exampleJson)
            : default(PageResourceGroupMemberResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search groups
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/groups")]
        [SwaggerOperation("SearchGroupsUsingGET1")]
        [SwaggerResponse(200, type: typeof(PageResourceGroupResource))]
        public virtual IActionResult SearchGroupsUsingGET1([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceGroupResource>(exampleJson)
            : default(PageResourceGroupResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a group template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="groupTemplateResource">The group template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/groups/templates/{id}")]
        [SwaggerOperation("UpdateGroupTemplateUsingPUT")]
        public virtual void UpdateGroupTemplateUsingPUT([FromRoute]string id, [FromBody]TemplateResource groupTemplateResource)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Modifies a group&#39;s details
        /// </summary>
        
        /// <param name="uniqueName">The group unique name</param>
        /// <param name="groupResource">The updated group</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/groups/{unique_name}")]
        [SwaggerOperation("UpdateGroupUsingPUT")]
        public virtual void UpdateGroupUsingPUT([FromRoute]string uniqueName, [FromBody]GroupResource groupResource)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Change a user&#39;s status
        /// </summary>
        
        /// <param name="uniqueName">The group unique name</param>
        /// <param name="userId">The user id of the member to modify</param>
        /// <param name="status">The new status for the user</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/groups/{unique_name}/members/{user_id}/status")]
        [SwaggerOperation("UpdateMemberStatusUsingPUT")]
        public virtual void UpdateMemberStatusUsingPUT([FromRoute]string uniqueName, [FromRoute]int? userId, [FromBody]string status)
        { 
            throw new NotImplementedException();
        }
    }
}
