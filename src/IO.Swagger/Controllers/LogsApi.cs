/*
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class LogsApiController : Controller
    { 

        /// <summary>
        /// Add a new user log entry
        /// </summary>
        
        /// <param name="logEntry">The user log entry to be added</param>
        /// <response code="200">OK</response>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//audit/logs")]
        [SwaggerOperation("AddUserLogUsingPOST")]
        public virtual void AddUserLogUsingPOST([FromBody]UserActionLog logEntry)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get an existing BRE event log entry by id
        /// </summary>
        
        /// <param name="id">The BRE event log entry id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/logs/event-log/{id}")]
        [SwaggerOperation("GetEventLogUsingGET")]
        [SwaggerResponse(200, type: typeof(BreEventLog))]
        public virtual IActionResult GetEventLogUsingGET([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BreEventLog>(exampleJson)
            : default(BreEventLog);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns a list of BRE event log entries
        /// </summary>
        
        /// <param name="filterStartDate">A comma separated string without spaces.  First value is the operator to search on, second value is the event log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).</param>
        /// <param name="filterEventName">Filter event logs by event name</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/logs/event-log")]
        [SwaggerOperation("GetEventsLogsUsingGET")]
        [SwaggerResponse(200, type: typeof(PageResourceBreEventLog))]
        public virtual IActionResult GetEventsLogsUsingGET([FromQuery]string filterStartDate, [FromQuery]string filterEventName, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceBreEventLog>(exampleJson)
            : default(PageResourceBreEventLog);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get an existing forward log entry by id
        /// </summary>
        
        /// <param name="id">The forward log entry id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/logs/forward-log/{id}")]
        [SwaggerOperation("GetForwardLogUsingGET")]
        [SwaggerResponse(200, type: typeof(ForwardLog))]
        public virtual IActionResult GetForwardLogUsingGET([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ForwardLog>(exampleJson)
            : default(ForwardLog);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns a list of forward log entries
        /// </summary>
        
        /// <param name="filterStartDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).</param>
        /// <param name="filterEndDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).</param>
        /// <param name="filterStatusCode">Filter forward logs by http status code</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/logs/forward-log")]
        [SwaggerOperation("GetForwardLogsUsingGET")]
        [SwaggerResponse(200, type: typeof(PageResourceForwardLog))]
        public virtual IActionResult GetForwardLogsUsingGET([FromQuery]string filterStartDate, [FromQuery]string filterEndDate, [FromQuery]int? filterStatusCode, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceForwardLog>(exampleJson)
            : default(PageResourceForwardLog);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns a user log entry by id
        /// </summary>
        
        /// <param name="id">The user log entry id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//audit/logs/{id}")]
        [SwaggerOperation("GetUserLogsUsingGET")]
        [SwaggerResponse(200, type: typeof(UserActionLog))]
        public virtual IActionResult GetUserLogsUsingGET([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserActionLog>(exampleJson)
            : default(UserActionLog);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns a page of user logs entries
        /// </summary>
        
        /// <param name="filterUser">Filter for actions taken by a specific user by id</param>
        /// <param name="filterActionName">Filter for actions of a specific name</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//audit/logs")]
        [SwaggerOperation("GetUserLogsUsingGET1")]
        [SwaggerResponse(200, type: typeof(PageResourceUserActionLog))]
        public virtual IActionResult GetUserLogsUsingGET1([FromQuery]int? filterUser, [FromQuery]string filterActionName, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceUserActionLog>(exampleJson)
            : default(PageResourceUserActionLog);
            return new ObjectResult(example);
        }
    }
}
