/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class AuthClientsApiController : Controller
    { 

        /// <summary>
        /// Create a new client
        /// </summary>
        
        /// <param name="clientResource">The client resource object</param>
        /// <response code="200">OK</response>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//auth/clients")]
        [SwaggerOperation("CreateClient")]
        [SwaggerResponse(200, type: typeof(ClientResource))]
        public virtual IActionResult CreateClient([FromBody]ClientResource clientResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ClientResource>(exampleJson)
            : default(ClientResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a client
        /// </summary>
        
        /// <param name="clientKey">The key of the client</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//auth/clients/{client_key}")]
        [SwaggerOperation("DeleteClient")]
        public virtual void DeleteClient([FromRoute]string clientKey)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single client
        /// </summary>
        
        /// <param name="clientKey">The key of the client</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//auth/clients/{client_key}")]
        [SwaggerOperation("GetClient")]
        [SwaggerResponse(200, type: typeof(ClientResource))]
        public virtual IActionResult GetClient([FromRoute]string clientKey)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ClientResource>(exampleJson)
            : default(ClientResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List available client grant types
        /// </summary>
        
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//auth/clients/grant-types")]
        [SwaggerOperation("GetClientGrantTypes")]
        [SwaggerResponse(200, type: typeof(List<GrantTypeResource>))]
        public virtual IActionResult GetClientGrantTypes()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<GrantTypeResource>>(exampleJson)
            : default(List<GrantTypeResource>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search clients
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//auth/clients")]
        [SwaggerOperation("GetClients")]
        [SwaggerResponse(200, type: typeof(PageResourceClientResource))]
        public virtual IActionResult GetClients([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceClientResource>(exampleJson)
            : default(PageResourceClientResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Set grant types for a client
        /// </summary>
        
        /// <param name="clientKey">The key of the client</param>
        /// <param name="grantList">A list of unique grant types</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//auth/clients/{client_key}/grant-types")]
        [SwaggerOperation("SetClientGrantTypes")]
        public virtual void SetClientGrantTypes([FromRoute]string clientKey, [FromBody]List<string> grantList)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Set redirect uris for a client
        /// </summary>
        
        /// <param name="clientKey">The key of the client</param>
        /// <param name="redirectList">A list of unique redirect uris</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//auth/clients/{client_key}/redirect-uris")]
        [SwaggerOperation("SetClientRedirectUris")]
        public virtual void SetClientRedirectUris([FromRoute]string clientKey, [FromBody]List<string> redirectList)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update a client
        /// </summary>
        
        /// <param name="clientKey">The key of the client</param>
        /// <param name="clientResource">The client resource object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//auth/clients/{client_key}")]
        [SwaggerOperation("UpdateClient")]
        public virtual void UpdateClient([FromRoute]string clientKey, [FromBody]ClientResource clientResource)
        { 
            throw new NotImplementedException();
        }
    }
}
