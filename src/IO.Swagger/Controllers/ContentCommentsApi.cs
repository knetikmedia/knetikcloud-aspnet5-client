/*
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ContentCommentsApiController : Controller
    { 

        /// <summary>
        /// Add a new comment
        /// </summary>
        
        /// <param name="commentResource">The comment to be added</param>
        /// <response code="200">OK</response>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//comments")]
        [SwaggerOperation("AddCommentUsingPOST")]
        [SwaggerResponse(200, type: typeof(CommentResource))]
        public virtual IActionResult AddCommentUsingPOST([FromBody]CommentResource commentResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CommentResource>(exampleJson)
            : default(CommentResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a comment
        /// </summary>
        
        /// <param name="id">The comment id</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//comments/{id}")]
        [SwaggerOperation("DeleteCommentUsingDELETE")]
        public virtual void DeleteCommentUsingDELETE([FromRoute]long? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Returns a comment by comment id
        /// </summary>
        
        /// <param name="id">The comment id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//comments/{id}")]
        [SwaggerOperation("GetCommentUsingGET")]
        [SwaggerResponse(200, type: typeof(CommentResource))]
        public virtual IActionResult GetCommentUsingGET([FromRoute]long? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CommentResource>(exampleJson)
            : default(CommentResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Returns a page of comments
        /// </summary>
        
        /// <param name="context">Get comments by context type</param>
        /// <param name="contextId">Get comments by context id</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//comments")]
        [SwaggerOperation("GetCommentsUsingGET")]
        [SwaggerResponse(200, type: typeof(PageResourceCommentResource))]
        public virtual IActionResult GetCommentsUsingGET([FromQuery]string context, [FromQuery]int? contextId, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceCommentResource>(exampleJson)
            : default(PageResourceCommentResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Search the comment index
        /// </summary>
        /// <remarks>The body is an ElasticSearch query json. Please see their &lt;a href&#x3D;&#39;https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html&#39;&gt;documentation&lt;/a&gt; for details on the format and search options</remarks>
        /// <param name="query">The search query</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">This is not a response, but demonstrates the format of the index object. the actual response will be a Page of comments as seen in the GET endpoint.</response>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//comments/search")]
        [SwaggerOperation("SearchCommentsUsingPOST")]
        [SwaggerResponse(200, type: typeof(CommentSearch))]
        public virtual IActionResult SearchCommentsUsingPOST([FromBody]Object query, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CommentSearch>(exampleJson)
            : default(CommentSearch);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update comment content
        /// </summary>
        
        /// <param name="id">The comment id</param>
        /// <param name="content">The comment content</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//comments/{id}/content")]
        [SwaggerOperation("UpdateCommentUsingPUT")]
        public virtual void UpdateCommentUsingPUT([FromRoute]long? id, [FromBody]string content)
        { 
            throw new NotImplementedException();
        }
    }
}
