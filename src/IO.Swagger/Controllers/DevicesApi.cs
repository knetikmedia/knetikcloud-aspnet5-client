/*
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class DevicesApiController : Controller
    { 

        /// <summary>
        /// Create a device
        /// </summary>
        
        /// <param name="device">device</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//devices")]
        [SwaggerOperation("CreateDeviceUsingPOST")]
        [SwaggerResponse(200, type: typeof(DeviceResource))]
        public virtual IActionResult CreateDeviceUsingPOST([FromBody]DeviceResource device)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeviceResource>(exampleJson)
            : default(DeviceResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a device
        /// </summary>
        
        /// <param name="id">id</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//devices/{id}")]
        [SwaggerOperation("DeleteDeviceUsingDELETE")]
        public virtual void DeleteDeviceUsingDELETE([FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single device
        /// </summary>
        
        /// <param name="id">id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//devices/{id}")]
        [SwaggerOperation("GetDeviceUsingGET")]
        [SwaggerResponse(200, type: typeof(DeviceResource))]
        public virtual IActionResult GetDeviceUsingGET([FromRoute]int? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeviceResource>(exampleJson)
            : default(DeviceResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search devices
        /// </summary>
        /// <remarks>Get a list of devices with optional filtering</remarks>
        /// <param name="filterMake">Filter for devices with specified make</param>
        /// <param name="filterModel">Filter for devices with specified model</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//devices")]
        [SwaggerOperation("GetDevicesUsingGET")]
        [SwaggerResponse(200, type: typeof(PageDeviceResource))]
        public virtual IActionResult GetDevicesUsingGET([FromQuery]string filterMake, [FromQuery]string filterModel, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageDeviceResource>(exampleJson)
            : default(PageDeviceResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a device
        /// </summary>
        
        /// <param name="device">device</param>
        /// <param name="id">id</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//devices/{id}")]
        [SwaggerOperation("UpdateDeviceUsingPUT")]
        public virtual void UpdateDeviceUsingPUT([FromBody]DeviceResource device, [FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }
    }
}
