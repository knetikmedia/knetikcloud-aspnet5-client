/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class UsersApiController : Controller
    { 

        /// <summary>
        /// Add a tag to a user
        /// </summary>
        
        /// <param name="userId">The id of the user</param>
        /// <param name="tag">tag</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users/{user_id}/tags")]
        [SwaggerOperation("AddUserTag")]
        public virtual void AddUserTag([FromRoute]int? userId, [FromBody]string tag)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Create a user template
        /// </summary>
        /// <remarks>User Templates define a type of user and the properties they have</remarks>
        /// <param name="userTemplateResource">The user template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users/templates")]
        [SwaggerOperation("CreateUserTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult CreateUserTemplate([FromBody]TemplateResource userTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a user template
        /// </summary>
        /// <remarks>If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects</remarks>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//users/templates/{id}")]
        [SwaggerOperation("DeleteUserTemplate")]
        public virtual void DeleteUserTemplate([FromRoute]string id, [FromQuery]string cascade)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single user
        /// </summary>
        /// <remarks>Additional private info is included as USERS_ADMIN</remarks>
        /// <param name="id">The id of the user or &#39;me&#39;</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/{id}")]
        [SwaggerOperation("GetUser")]
        [SwaggerResponse(200, type: typeof(UserResource))]
        public virtual IActionResult GetUser([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserResource>(exampleJson)
            : default(UserResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List tags for a user
        /// </summary>
        
        /// <param name="userId">The id of the user</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/{user_id}/tags")]
        [SwaggerOperation("GetUserTags")]
        [SwaggerResponse(200, type: typeof(List<string>))]
        public virtual IActionResult GetUserTags([FromRoute]int? userId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
            : default(List<string>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single user template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/templates/{id}")]
        [SwaggerOperation("GetUserTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult GetUserTemplate([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search user templates
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users/templates")]
        [SwaggerOperation("GetUserTemplates")]
        [SwaggerResponse(200, type: typeof(PageResourceTemplateResource))]
        public virtual IActionResult GetUserTemplates([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceTemplateResource>(exampleJson)
            : default(PageResourceTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search users
        /// </summary>
        /// <remarks>Additional private info is included as USERS_ADMIN</remarks>
        /// <param name="filterDisplayname">Filter for users whose display name starts with provided string.</param>
        /// <param name="filterEmail">Filter for users whose email starts with provided string. Requires USERS_ADMIN permission</param>
        /// <param name="filterFirstname">Filter for users whose first name starts with provided string. Requires USERS_ADMIN permission</param>
        /// <param name="filterFullname">Filter for users whose full name starts with provided string. Requires USERS_ADMIN permission</param>
        /// <param name="filterLastname">Filter for users whose last name starts with provided string. Requires USERS_ADMIN permission</param>
        /// <param name="filterUsername">Filter for users whose username starts with the provided string. Requires USERS_ADMIN permission</param>
        /// <param name="filterTag">Filter for users who have a given tag</param>
        /// <param name="filterGroup">Filter for users in a given group, by unique name</param>
        /// <param name="filterRole">Filter for users with a given role</param>
        /// <param name="filterSearch">Filter for users whose display_name starts with the provided string, or username if display_name is null</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//users")]
        [SwaggerOperation("GetUsers")]
        [SwaggerResponse(200, type: typeof(PageResourceUserBaseResource))]
        public virtual IActionResult GetUsers([FromQuery]string filterDisplayname, [FromQuery]string filterEmail, [FromQuery]string filterFirstname, [FromQuery]string filterFullname, [FromQuery]string filterLastname, [FromQuery]string filterUsername, [FromQuery]string filterTag, [FromQuery]string filterGroup, [FromQuery]string filterRole, [FromQuery]string filterSearch, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceUserBaseResource>(exampleJson)
            : default(PageResourceUserBaseResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Choose a new password after a reset
        /// </summary>
        /// <remarks>Finish resetting a user&#39;s password using the secret provided from the password-reset endpoint.  Password should be in plain text and will be encrypted on receipt. Use SSL for security.</remarks>
        /// <param name="id">The id of the user</param>
        /// <param name="newPasswordRequest">The new password request object</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/{id}/password-reset")]
        [SwaggerOperation("PasswordReset")]
        public virtual void PasswordReset([FromRoute]int? id, [FromBody]NewPasswordRequest newPasswordRequest)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Register a new user
        /// </summary>
        /// <remarks>Password should be in plain text and will be encrypted on receipt. Use SSL for security</remarks>
        /// <param name="userResource">The user resource object</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users")]
        [SwaggerOperation("RegisterUser")]
        [SwaggerResponse(200, type: typeof(UserResource))]
        public virtual IActionResult RegisterUser([FromBody]UserResource userResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserResource>(exampleJson)
            : default(UserResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Remove a tag from a user
        /// </summary>
        
        /// <param name="userId">The id of the user</param>
        /// <param name="tag">The tag to remove</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//users/{user_id}/tags/{tag}")]
        [SwaggerOperation("RemoveUserTag")]
        public virtual void RemoveUserTag([FromRoute]int? userId, [FromRoute]string tag)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Set a user&#39;s password
        /// </summary>
        /// <remarks>Password should be in plain text and will be encrypted on receipt. Use SSL for security.</remarks>
        /// <param name="id">The id of the user</param>
        /// <param name="password">The new plain text password</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/{id}/password")]
        [SwaggerOperation("SetPassword")]
        public virtual void SetPassword([FromRoute]int? id, [FromBody]string password)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Reset a user&#39;s password
        /// </summary>
        /// <remarks>A reset code will be generated and a &#39;forgot_password&#39; BRE event will be fired with that code; this can be routed to the user as needed and submitted to the &#39;choose a new password&#39; endpoint.</remarks>
        /// <param name="id">The id of the user</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//users/{id}/password-reset")]
        [SwaggerOperation("StartPasswordReset")]
        public virtual void StartPasswordReset([FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>Password will not be edited on this endpoint, use password specific endpoints.</remarks>
        /// <param name="id">The id of the user or &#39;me&#39;</param>
        /// <param name="userResource">The user resource object</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/{id}")]
        [SwaggerOperation("UpdateUser")]
        public virtual void UpdateUser([FromRoute]string id, [FromBody]UserResource userResource)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update a user template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="userTemplateResource">The user template resource object</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//users/templates/{id}")]
        [SwaggerOperation("UpdateUserTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult UpdateUserTemplate([FromRoute]string id, [FromBody]TemplateResource userTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }
    }
}
