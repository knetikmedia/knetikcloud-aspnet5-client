/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class LocationsApiController : Controller
    { 

        /// <summary>
        /// Get a list of countries
        /// </summary>
        
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//location/countries")]
        [SwaggerOperation("GetCountries")]
        [SwaggerResponse(200, type: typeof(List<CountryResource>))]
        public virtual IActionResult GetCountries()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<CountryResource>>(exampleJson)
            : default(List<CountryResource>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get the iso3 code of your country
        /// </summary>
        /// <remarks>Determined by geo ip location</remarks>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//location/geolocation/country")]
        [SwaggerOperation("GetCountryByGeoLocation")]
        [SwaggerResponse(200, type: typeof(string))]
        public virtual IActionResult GetCountryByGeoLocation()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a list of a country&#39;s states
        /// </summary>
        
        /// <param name="countryCodeIso3">The iso3 code of the country</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//location/countries/{country_code_iso3}/states")]
        [SwaggerOperation("GetCountryStates")]
        [SwaggerResponse(200, type: typeof(List<StateResource>))]
        public virtual IActionResult GetCountryStates([FromRoute]string countryCodeIso3)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<StateResource>>(exampleJson)
            : default(List<StateResource>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get the currency information of your country
        /// </summary>
        /// <remarks>Determined by geo ip location, currency to country mapping and a fallback setting</remarks>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//location/geolocation/currency")]
        [SwaggerOperation("GetCurrencyByGeoLocation")]
        [SwaggerResponse(200, type: typeof(CurrencyResource))]
        public virtual IActionResult GetCurrencyByGeoLocation()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CurrencyResource>(exampleJson)
            : default(CurrencyResource);
            return new ObjectResult(example);
        }
    }
}
