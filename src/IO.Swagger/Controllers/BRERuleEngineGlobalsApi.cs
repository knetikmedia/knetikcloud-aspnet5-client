/*
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class BRERuleEngineGlobalsApiController : Controller
    { 

        /// <summary>
        /// Create a global definition
        /// </summary>
        /// <remarks>Once created you can then use in a custom rule. Note that global definitions cannot be modified or deleted if in use.</remarks>
        /// <param name="breGlobalResource">The BRE global resource object</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//bre/globals/definitions")]
        [SwaggerOperation("CreateGlobalUsingPOST")]
        [SwaggerResponse(200, type: typeof(BreGlobalResource))]
        public virtual IActionResult CreateGlobalUsingPOST([FromBody]BreGlobalResource breGlobalResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BreGlobalResource>(exampleJson)
            : default(BreGlobalResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a global
        /// </summary>
        /// <remarks>May fail if there are existing rules against it. Cannot delete core globals</remarks>
        /// <param name="id">The id of the global definition</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//bre/globals/definitions/{id}")]
        [SwaggerOperation("DeleteGlobalUsingDELETE")]
        public virtual void DeleteGlobalUsingDELETE([FromRoute]string id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single global definition
        /// </summary>
        
        /// <param name="id">The id of the global definition</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/globals/definitions/{id}")]
        [SwaggerOperation("GetGlobalUsingGET")]
        [SwaggerResponse(200, type: typeof(BreGlobalResource))]
        public virtual IActionResult GetGlobalUsingGET([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BreGlobalResource>(exampleJson)
            : default(BreGlobalResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List global definitions
        /// </summary>
        
        /// <param name="filterSystem">Filter for globals that are system globals when true, or not when false. Leave off for both mixed</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//bre/globals/definitions")]
        [SwaggerOperation("GetGlobalsUsingGET")]
        [SwaggerResponse(200, type: typeof(PageResourceBreGlobalResource))]
        public virtual IActionResult GetGlobalsUsingGET([FromQuery]bool? filterSystem, [FromQuery]int? size, [FromQuery]int? page)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceBreGlobalResource>(exampleJson)
            : default(PageResourceBreGlobalResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a global definition
        /// </summary>
        /// <remarks>May fail if new parameters mismatch requirements of existing rules. Cannot update core globals</remarks>
        /// <param name="id">The id of the global definition</param>
        /// <param name="breGlobalResource">The BRE global resource object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//bre/globals/definitions/{id}")]
        [SwaggerOperation("UpdateGlobalUsingPUT")]
        public virtual void UpdateGlobalUsingPUT([FromRoute]string id, [FromBody]BreGlobalResource breGlobalResource)
        { 
            throw new NotImplementedException();
        }
    }
}
