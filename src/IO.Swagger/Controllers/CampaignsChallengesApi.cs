/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class CampaignsChallengesApiController : Controller
    { 

        /// <summary>
        /// Create a challenge
        /// </summary>
        /// <remarks>Challenges do not run on their own.  They must be added to a campaign before events will spawn.</remarks>
        /// <param name="challengeResource">The challenge resource object</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//challenges")]
        [SwaggerOperation("CreateChallenge")]
        [SwaggerResponse(200, type: typeof(ChallengeResource))]
        public virtual IActionResult CreateChallenge([FromBody]ChallengeResource challengeResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeResource>(exampleJson)
            : default(ChallengeResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create a challenge activity
        /// </summary>
        
        /// <param name="challengeId">The challenge id</param>
        /// <param name="challengeActivityResource">The challenge activity resource object</param>
        /// <param name="validateSettings">Whether to validate the settings being sent against the available settings on the base activity.</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//challenges/{challenge_id}/activities")]
        [SwaggerOperation("CreateChallengeActivity")]
        [SwaggerResponse(200, type: typeof(ChallengeActivityResource))]
        public virtual IActionResult CreateChallengeActivity([FromRoute]long? challengeId, [FromBody]ChallengeActivityResource challengeActivityResource, [FromQuery]bool? validateSettings)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeActivityResource>(exampleJson)
            : default(ChallengeActivityResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create a challenge template
        /// </summary>
        /// <remarks>Challenge Templates define a type of challenge and the properties they have</remarks>
        /// <param name="challengeTemplateResource">The challenge template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//challenges/templates")]
        [SwaggerOperation("CreateChallengeTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult CreateChallengeTemplate([FromBody]TemplateResource challengeTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a challenge
        /// </summary>
        
        /// <param name="id">The challenge id</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//challenges/{id}")]
        [SwaggerOperation("DeleteChallenge")]
        public virtual void DeleteChallenge([FromRoute]long? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete a challenge activity
        /// </summary>
        
        /// <param name="activityId">The activity id</param>
        /// <param name="challengeId">The challenge id</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//challenges/{challenge_id}/activities/{activity_id}")]
        [SwaggerOperation("DeleteChallengeActivity")]
        public virtual void DeleteChallengeActivity([FromRoute]long? activityId, [FromRoute]long? challengeId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete a challenge event
        /// </summary>
        
        /// <param name="id">The challenge event id</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//challenges/events/{id}")]
        [SwaggerOperation("DeleteChallengeEvent")]
        public virtual void DeleteChallengeEvent([FromRoute]long? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete a challenge template
        /// </summary>
        /// <remarks>If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects</remarks>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("//challenges/templates/{id}")]
        [SwaggerOperation("DeleteChallengeTemplate")]
        public virtual void DeleteChallengeTemplate([FromRoute]string id, [FromQuery]string cascade)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Retrieve a challenge
        /// </summary>
        
        /// <param name="id">The challenge id</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/{id}")]
        [SwaggerOperation("GetChallenge")]
        [SwaggerResponse(200, type: typeof(ChallengeResource))]
        public virtual IActionResult GetChallenge([FromRoute]long? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeResource>(exampleJson)
            : default(ChallengeResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search challenge activities
        /// </summary>
        
        /// <param name="challengeId">The challenge id</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/{challenge_id}/activities")]
        [SwaggerOperation("GetChallengeActivities")]
        [SwaggerResponse(200, type: typeof(PageResourceBareChallengeActivityResource))]
        public virtual IActionResult GetChallengeActivities([FromRoute]long? challengeId, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceBareChallengeActivityResource>(exampleJson)
            : default(PageResourceBareChallengeActivityResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single challenge activity
        /// </summary>
        
        /// <param name="activityId">The activity id</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/{challenge_id}/activities/{activity_id}")]
        [SwaggerOperation("GetChallengeActivity")]
        [SwaggerResponse(200, type: typeof(ChallengeActivityResource))]
        public virtual IActionResult GetChallengeActivity([FromRoute]long? activityId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeActivityResource>(exampleJson)
            : default(ChallengeActivityResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrieve a single challenge event details
        /// </summary>
        
        /// <param name="id">The challenge event id</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/events/{id}")]
        [SwaggerOperation("GetChallengeEvent")]
        [SwaggerResponse(200, type: typeof(ChallengeEventResource))]
        public virtual IActionResult GetChallengeEvent([FromRoute]long? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeEventResource>(exampleJson)
            : default(ChallengeEventResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrieve a list of challenge events
        /// </summary>
        
        /// <param name="filterStartDate">A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).</param>
        /// <param name="filterEndDate">A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).</param>
        /// <param name="filterCampaigns">check only for events from currently running campaigns</param>
        /// <param name="filterChallenge">check only for events from the challenge specified by id</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/events")]
        [SwaggerOperation("GetChallengeEvents")]
        [SwaggerResponse(200, type: typeof(PageResourceChallengeEventResource))]
        public virtual IActionResult GetChallengeEvents([FromQuery]string filterStartDate, [FromQuery]string filterEndDate, [FromQuery]bool? filterCampaigns, [FromQuery]long? filterChallenge, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceChallengeEventResource>(exampleJson)
            : default(PageResourceChallengeEventResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single challenge template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/templates/{id}")]
        [SwaggerOperation("GetChallengeTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult GetChallengeTemplate([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search challenge templates
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/templates")]
        [SwaggerOperation("GetChallengeTemplates")]
        [SwaggerResponse(200, type: typeof(PageResourceTemplateResource))]
        public virtual IActionResult GetChallengeTemplates([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceTemplateResource>(exampleJson)
            : default(PageResourceTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrieve a list of challenges
        /// </summary>
        
        /// <param name="filterTemplate">Filter for challenges that are not tied to campaigns (templates)</param>
        /// <param name="filterActiveCampaign">Filter for challenges that are tied to active campaigns</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges")]
        [SwaggerOperation("GetChallenges")]
        [SwaggerResponse(200, type: typeof(PageResourceChallengeResource))]
        public virtual IActionResult GetChallenges([FromQuery]bool? filterTemplate, [FromQuery]bool? filterActiveCampaign)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceChallengeResource>(exampleJson)
            : default(PageResourceChallengeResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a challenge
        /// </summary>
        /// <remarks>If the challenge is a copy, changes will propagate to all the related challenges</remarks>
        /// <param name="id">The challenge id</param>
        /// <param name="challengeResource">The challenge resource object</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//challenges/{id}")]
        [SwaggerOperation("UpdateChallenge")]
        [SwaggerResponse(200, type: typeof(ChallengeResource))]
        public virtual IActionResult UpdateChallenge([FromRoute]long? id, [FromBody]ChallengeResource challengeResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeResource>(exampleJson)
            : default(ChallengeResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a challenge activity
        /// </summary>
        
        /// <param name="activityId">The activity id</param>
        /// <param name="challengeId">The challenge id</param>
        /// <param name="challengeActivityResource">The challenge activity resource object</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//challenges/{challenge_id}/activities/{activity_id}")]
        [SwaggerOperation("UpdateChallengeActivity")]
        [SwaggerResponse(200, type: typeof(ChallengeActivityResource))]
        public virtual IActionResult UpdateChallengeActivity([FromRoute]long? activityId, [FromRoute]long? challengeId, [FromBody]ChallengeActivityResource challengeActivityResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeActivityResource>(exampleJson)
            : default(ChallengeActivityResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a challenge template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="challengeTemplateResource">The challenge template resource object</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//challenges/templates/{id}")]
        [SwaggerOperation("UpdateChallengeTemplate")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult UpdateChallengeTemplate([FromRoute]string id, [FromBody]TemplateResource challengeTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }
    }
}
