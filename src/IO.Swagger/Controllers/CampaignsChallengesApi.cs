/*
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class CampaignsChallengesApiController : Controller
    { 

        /// <summary>
        /// Create a challenge activity
        /// </summary>
        
        /// <param name="challengeId">The challenge id</param>
        /// <param name="challengeActivityResource">The challenge activity resource object</param>
        /// <param name="validateSettings">Whether to validate the settings being sent against the available settings on the base activity.</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//challenges/{challenge_id}/activities")]
        [SwaggerOperation("CreateChallengeActivityUsingPOST")]
        [SwaggerResponse(200, type: typeof(ChallengeActivityResource))]
        public virtual IActionResult CreateChallengeActivityUsingPOST([FromRoute]long? challengeId, [FromBody]ChallengeActivityResource challengeActivityResource, [FromQuery]bool? validateSettings)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeActivityResource>(exampleJson)
            : default(ChallengeActivityResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create a challenge template
        /// </summary>
        /// <remarks>Challenge Templates define a type of challenge and the properties they have</remarks>
        /// <param name="challengeTemplateResource">The challenge template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//challenges/templates")]
        [SwaggerOperation("CreateChallengeTemplateUsingPOST")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult CreateChallengeTemplateUsingPOST([FromBody]TemplateResource challengeTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create a challenge
        /// </summary>
        /// <remarks>Challenges do not run on their own.  They must be added to a campaign before events will spawn.</remarks>
        /// <param name="challengeResource">The challenge resource object</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//challenges")]
        [SwaggerOperation("CreateChallengeUsingPOST")]
        [SwaggerResponse(200, type: typeof(ChallengeResource))]
        public virtual IActionResult CreateChallengeUsingPOST([FromBody]ChallengeResource challengeResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeResource>(exampleJson)
            : default(ChallengeResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a challenge activity
        /// </summary>
        
        /// <param name="activityId">The activity id</param>
        /// <param name="challengeId">The challenge id</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//challenges/{challenge_id}/activities/{activity_id}")]
        [SwaggerOperation("DeleteChallengeActivityUsingDELETE")]
        public virtual void DeleteChallengeActivityUsingDELETE([FromRoute]long? activityId, [FromRoute]long? challengeId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete a challenge event
        /// </summary>
        
        /// <param name="id">The challenge event id</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//challenges/events/{id}")]
        [SwaggerOperation("DeleteChallengeEventUsingDELETE")]
        public virtual void DeleteChallengeEventUsingDELETE([FromRoute]long? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete a challenge template
        /// </summary>
        /// <remarks>If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects</remarks>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//challenges/templates/{id}")]
        [SwaggerOperation("DeleteChallengeTemplateUsingDELETE")]
        public virtual void DeleteChallengeTemplateUsingDELETE([FromRoute]string id, [FromQuery]string cascade)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete a challenge
        /// </summary>
        
        /// <param name="id">The challenge id</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//challenges/{id}")]
        [SwaggerOperation("DeleteChallengeUsingDELETE")]
        public virtual void DeleteChallengeUsingDELETE([FromRoute]long? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// List and search challenge activities
        /// </summary>
        
        /// <param name="challengeId">The challenge id</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/{challenge_id}/activities")]
        [SwaggerOperation("GetActivitiesUsingGET1")]
        [SwaggerResponse(200, type: typeof(PageBareChallengeActivityResource))]
        public virtual IActionResult GetActivitiesUsingGET1([FromRoute]long? challengeId, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageBareChallengeActivityResource>(exampleJson)
            : default(PageBareChallengeActivityResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single challenge activity
        /// </summary>
        
        /// <param name="activityId">The activity id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/{challenge_id}/activities/{activity_id}")]
        [SwaggerOperation("GetChallengeActivityUsingGET")]
        [SwaggerResponse(200, type: typeof(ChallengeActivityResource))]
        public virtual IActionResult GetChallengeActivityUsingGET([FromRoute]long? activityId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeActivityResource>(exampleJson)
            : default(ChallengeActivityResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrieve a single challenge event details
        /// </summary>
        
        /// <param name="id">The challenge event id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/events/{id}")]
        [SwaggerOperation("GetChallengeEventUsingGET")]
        [SwaggerResponse(200, type: typeof(ChallengeEventResource))]
        public virtual IActionResult GetChallengeEventUsingGET([FromRoute]long? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeEventResource>(exampleJson)
            : default(ChallengeEventResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrieve a list of challenge events
        /// </summary>
        
        /// <param name="filterStartDateMin">events starting after this date, unix timestamp in seconds</param>
        /// <param name="filterStartDateMax">events starting before this date, unix timestamp in seconds</param>
        /// <param name="filterEndDateMin">events ending after this date, unix timestamp in seconds</param>
        /// <param name="filterEndDateMax">events ending before this date, unix timestamp in seconds</param>
        /// <param name="filterCampaigns">check only for events from currently running campaigns</param>
        /// <param name="filterChallenge">check only for events from the challenge specified by id</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/events")]
        [SwaggerOperation("GetChallengeEventssUsingGET")]
        [SwaggerResponse(200, type: typeof(PageChallengeEventResource))]
        public virtual IActionResult GetChallengeEventssUsingGET([FromQuery]long? filterStartDateMin, [FromQuery]long? filterStartDateMax, [FromQuery]long? filterEndDateMin, [FromQuery]long? filterEndDateMax, [FromQuery]bool? filterCampaigns, [FromQuery]long? filterChallenge, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageChallengeEventResource>(exampleJson)
            : default(PageChallengeEventResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single challenge template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/templates/{id}")]
        [SwaggerOperation("GetChallengeTemplateUsingGET")]
        [SwaggerResponse(200, type: typeof(TemplateResource))]
        public virtual IActionResult GetChallengeTemplateUsingGET([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemplateResource>(exampleJson)
            : default(TemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search challenge templates
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/templates")]
        [SwaggerOperation("GetChallengeTemplatesUsingGET")]
        [SwaggerResponse(200, type: typeof(PageTemplateResource))]
        public virtual IActionResult GetChallengeTemplatesUsingGET([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageTemplateResource>(exampleJson)
            : default(PageTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrieve a single challenge details
        /// </summary>
        
        /// <param name="id">The challenge id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges/{id}")]
        [SwaggerOperation("GetChallengeUsingGET")]
        [SwaggerResponse(200, type: typeof(ChallengeResource))]
        public virtual IActionResult GetChallengeUsingGET([FromRoute]long? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeResource>(exampleJson)
            : default(ChallengeResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Retrieve a list of challenges
        /// </summary>
        
        /// <param name="filterTemplate">Filter for challenges that are not tied to campaigns (templates)</param>
        /// <param name="filterActiveCampaign">Filter for challenges that are tied to active campaigns</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//challenges")]
        [SwaggerOperation("GetChallengesUsingGET1")]
        [SwaggerResponse(200, type: typeof(PageChallengeResource))]
        public virtual IActionResult GetChallengesUsingGET1([FromQuery]bool? filterTemplate, [FromQuery]bool? filterActiveCampaign)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageChallengeResource>(exampleJson)
            : default(PageChallengeResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a challenge activity
        /// </summary>
        
        /// <param name="activityId">The activity id</param>
        /// <param name="challengeId">The challenge id</param>
        /// <param name="challengeActivityResource">The challenge activity resource object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//challenges/{challenge_id}/activities/{activity_id}")]
        [SwaggerOperation("UpdateChallengeActivityUsingPUT")]
        public virtual void UpdateChallengeActivityUsingPUT([FromRoute]long? activityId, [FromRoute]long? challengeId, [FromBody]ChallengeActivityResource challengeActivityResource)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update a challenge template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="challengeTemplateResource">The challenge template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//challenges/templates/{id}")]
        [SwaggerOperation("UpdateChallengeTemplateUsingPUT")]
        public virtual void UpdateChallengeTemplateUsingPUT([FromRoute]string id, [FromBody]TemplateResource challengeTemplateResource)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update a challenge&#39;s information
        /// </summary>
        /// <remarks>If the challenge is a copy, changes will propagate to all the related challenges</remarks>
        /// <param name="id">The challenge id</param>
        /// <param name="challengeResource">The challenge resource object</param>
        /// <response code="200">OK</response>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//challenges/{id}")]
        [SwaggerOperation("UpdateChallengeUsingPUT")]
        [SwaggerResponse(200, type: typeof(ChallengeResource))]
        public virtual IActionResult UpdateChallengeUsingPUT([FromRoute]long? id, [FromBody]ChallengeResource challengeResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChallengeResource>(exampleJson)
            : default(ChallengeResource);
            return new ObjectResult(example);
        }
    }
}
