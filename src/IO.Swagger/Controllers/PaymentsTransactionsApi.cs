/*
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class PaymentsTransactionsApiController : Controller
    { 

        /// <summary>
        /// Get the details for a single transaction
        /// </summary>
        
        /// <param name="id">id</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//transactions/{id}")]
        [SwaggerOperation("GetTransaction")]
        [SwaggerResponse(200, type: typeof(TransactionResource))]
        public virtual IActionResult GetTransaction([FromRoute]int? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TransactionResource>(exampleJson)
            : default(TransactionResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search transactions
        /// </summary>
        
        /// <param name="filterInvoice">Filter for transactions from a specific invoice</param>
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//transactions")]
        [SwaggerOperation("GetTransactions")]
        [SwaggerResponse(200, type: typeof(PageResourceTransactionResource))]
        public virtual IActionResult GetTransactions([FromQuery]int? filterInvoice, [FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageResourceTransactionResource>(exampleJson)
            : default(PageResourceTransactionResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Refund a payment transaction, in full or in part
        /// </summary>
        /// <remarks>Will not allow for refunding more than the full amount even with multiple partial refunds. Money is refunded to the payment method used to make the original payment. Payment method must support refunds.</remarks>
        /// <param name="id">The id of the transaction to refund</param>
        /// <param name="request">Request containing refund details</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//transactions/{id}/refunds")]
        [SwaggerOperation("RefundTransaction")]
        [SwaggerResponse(200, type: typeof(RefundResource))]
        public virtual IActionResult RefundTransaction([FromRoute]int? id, [FromBody]RefundRequest request)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RefundResource>(exampleJson)
            : default(RefundResource);
            return new ObjectResult(example);
        }
    }
}
