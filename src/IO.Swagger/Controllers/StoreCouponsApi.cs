/*
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class StoreCouponsApiController : Controller
    { 

        /// <summary>
        /// Create a coupon item
        /// </summary>
        /// <remarks>SKUs have to be unique in the entire store.</remarks>
        /// <param name="couponItem">The coupon item object</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//store/coupons")]
        [SwaggerOperation("CreateCouponItemUsingPOST")]
        [SwaggerResponse(200, type: typeof(CouponItem))]
        public virtual IActionResult CreateCouponItemUsingPOST([FromBody]CouponItem couponItem)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CouponItem>(exampleJson)
            : default(CouponItem);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Create a coupon template
        /// </summary>
        /// <remarks>Coupon Templates define a type of coupon and the properties they have.</remarks>
        /// <param name="couponTemplateResource">The new coupon template</param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("//store/coupons/templates")]
        [SwaggerOperation("CreateCouponTemplateUsingPOST")]
        [SwaggerResponse(200, type: typeof(ItemTemplateResource))]
        public virtual IActionResult CreateCouponTemplateUsingPOST([FromBody]ItemTemplateResource couponTemplateResource)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ItemTemplateResource>(exampleJson)
            : default(ItemTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete a coupon item
        /// </summary>
        
        /// <param name="id">The id of the coupon</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//store/coupons/{id}")]
        [SwaggerOperation("DeleteCouponItemUsingDELETE")]
        public virtual void DeleteCouponItemUsingDELETE([FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Delete a coupon template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach</param>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("//store/coupons/templates/{id}")]
        [SwaggerOperation("DeleteCouponTemplateUsingDELETE")]
        public virtual void DeleteCouponTemplateUsingDELETE([FromRoute]string id, [FromQuery]string cascade)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get a single coupon item
        /// </summary>
        
        /// <param name="id">The id of the coupon</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//store/coupons/{id}")]
        [SwaggerOperation("GetCouponItemUsingGET")]
        [SwaggerResponse(200, type: typeof(CouponItem))]
        public virtual IActionResult GetCouponItemUsingGET([FromRoute]int? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CouponItem>(exampleJson)
            : default(CouponItem);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Get a single coupon template
        /// </summary>
        /// <remarks>Coupon Templates define a type of coupon and the properties they have.</remarks>
        /// <param name="id">The id of the template</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//store/coupons/templates/{id}")]
        [SwaggerOperation("GetCouponTemplateUsingGET")]
        [SwaggerResponse(200, type: typeof(ItemTemplateResource))]
        public virtual IActionResult GetCouponTemplateUsingGET([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ItemTemplateResource>(exampleJson)
            : default(ItemTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// List and search coupon templates
        /// </summary>
        
        /// <param name="size">The number of objects returned per page</param>
        /// <param name="page">The number of the page returned, starting with 1</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("//store/coupons/templates")]
        [SwaggerOperation("GetCouponTemplatesUsingGET")]
        [SwaggerResponse(200, type: typeof(PageItemTemplateResource))]
        public virtual IActionResult GetCouponTemplatesUsingGET([FromQuery]int? size, [FromQuery]int? page, [FromQuery]string order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageItemTemplateResource>(exampleJson)
            : default(PageItemTemplateResource);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update a coupon item
        /// </summary>
        
        /// <param name="id">The id of the coupon</param>
        /// <param name="couponItem">The coupon item object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//store/coupons/{id}")]
        [SwaggerOperation("UpdateCouponItemUsingPUT")]
        public virtual void UpdateCouponItemUsingPUT([FromRoute]int? id, [FromBody]CouponItem couponItem)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update a coupon template
        /// </summary>
        
        /// <param name="id">The id of the template</param>
        /// <param name="couponTemplateResource">The coupon template resource object</param>
        /// <response code="201">Created</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("//store/coupons/templates/{id}")]
        [SwaggerOperation("UpdateCouponTemplateUsingPUT")]
        public virtual void UpdateCouponTemplateUsingPUT([FromRoute]string id, [FromBody]ItemTemplateResource couponTemplateResource)
        { 
            throw new NotImplementedException();
        }
    }
}
